{"version":3,"file":"wisty.umd.js","sources":["../src/lstm.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/hcn.ts","../src/use.ts","../src/bow.ts","../src/utils/hashcode.ts","../src/utils/parse_stories.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs';\n\ntype LSTMPrediction = {y: tf.Tensor1D, nc: tf.Tensor2D, nh: tf.Tensor2D};\n\n/**\n * An LSTM cell with a dense layer on its top.\n */\nexport class LSTM {\n    // LSTM parameters :\n    private lstmKernel: tf.Tensor;\n    private lstmBias: tf.Tensor;\n    private lstmForgetBias: tf.Tensor;\n    private lstmInitH: tf.Tensor;\n    private lstmInitC: tf.Tensor;\n\n    // Dense layer parameters :\n    private denseWeights: tf.Tensor;\n    private denseBias: tf.Tensor;\n\n    private optimizer: tf.Optimizer;\n    // Let dropout be public to allow to change its value when training/inference.\n    public dropout: number;\n\n    /**\n     * @param inputSize The dimension of the input data.\n     * @param hiddenSize The dimension of the output of the LSTM, passed to the dense layer.\n     * @param outputSize The dimension of the output data.\n     * @param optimizer The optimizer the model should use to train itself.\n     * @param dropout The dropout rate between the LSTM cell and the dense layer.\n     */\n    constructor(inputSize: number, hiddenSize: number, outputSize: number,\n        optimizer: tf.Optimizer = tf.train.adam(), dropout: number = 0.2) {\n        this.lstmKernel = LSTM.randomVariable([inputSize + hiddenSize, hiddenSize * 4]);\n        this.lstmBias = LSTM.randomVariable([hiddenSize * 4]);\n        this.lstmForgetBias = LSTM.randomVariable([1], true); // (scalar)\n        this.lstmInitH = LSTM.randomVariable([1, hiddenSize]);\n        this.lstmInitC = LSTM.randomVariable([1, hiddenSize]);\n\n        this.denseWeights = LSTM.randomVariable([hiddenSize, outputSize]);\n        this.denseBias = LSTM.randomVariable([outputSize]);\n\n        this.optimizer = optimizer;\n        this.dropout = dropout;\n    }\n\n    /**\n     * Utility method randomly initializing a variable of a given shape.\n     */\n    private static randomVariable(shape: number[], scalar: boolean = false): tf.Variable {\n        return tf.tidy(() => {\n            let randomTensor = tf.randomNormal(shape);\n            if (scalar) randomTensor = randomTensor.asScalar();\n\n            return randomTensor.variable();\n        });\n    }\n\n    /**\n     * Gives the initial state values of the LSTM (c and h).\n     */\n    initLSTM(): {c: tf.Tensor2D, h: tf.Tensor2D} {\n        return {\n            c: <tf.Tensor2D> this.lstmInitC.clone(),\n            h: <tf.Tensor2D> this.lstmInitH.clone()\n        };\n    }\n\n    /**\n     * Make a prediction given an input and state values (c and h).\n     * @param x A vector of shape [inputSize]\n     */\n    predict(x: tf.Tensor1D, c: tf.Tensor2D, h: tf.Tensor2D): LSTMPrediction {\n        return tf.tidy(() => {\n            // Execute the LSTM cell.\n            const [nc, nh] = tf.basicLSTMCell(\n                <tf.Scalar> this.lstmForgetBias,\n                <tf.Tensor2D> this.lstmKernel,\n                <tf.Tensor1D> this.lstmBias,\n                <tf.Tensor2D> tf.stack([x]),\n                h, c\n            );\n\n            // Execute the dense layer on top of the LSTM cell.\n            const y = <tf.Tensor1D> tf\n                .dropout(nh, this.dropout)\n                .matMul(this.denseWeights)\n                .add(this.denseBias)\n                .squeeze();\n\n            return { y, nc, nh };\n        });\n    }\n\n    /**\n     * Train the model from a sequence.\n     * @param inputSeq The input matrix of shape [length, inputSize]\n     * @param targetSeq The expected output matrix of shape [length, outputSize]\n     * @returns Loss and accuracy of the model prediction.\n     */\n    fitSequence(inputSeq: tf.Tensor2D, targetSeq: tf.Tensor2D): {loss: number, accuracy: number} {\n        let loss: number;\n        let accuracy: number;\n\n        this.optimizer.minimize(() => {\n            let c = this.lstmInitC;\n            let h = this.lstmInitH;\n\n            // Make a prediction for each step of the input sequence.\n            const predSeq = tf.stack(\n                inputSeq.unstack().map((x) => {\n                    const pred = this.predict(\n                        <tf.Tensor1D> x,\n                        <tf.Tensor2D> c,\n                        <tf.Tensor2D> h\n                    );\n\n                    c = pred.nc;\n                    h = pred.nh;\n\n                    return pred.y;\n                })\n            );\n\n            // Compare the predicted sequence with the target.\n            const lossScalar = <tf.Scalar> tf.losses.softmaxCrossEntropy(targetSeq, predSeq);\n\n            // Store the loss and accuracy measures.\n            loss = <number> lossScalar.arraySync();\n            accuracy = <number> tf.metrics.categoricalAccuracy(targetSeq, predSeq)\n                .mean()\n                .arraySync();\n\n            // Return the loss to the optimizer to update the model.\n            return lossScalar;\n        });\n\n        return { loss, accuracy };\n    }\n\n    /**\n     * Update the given model parameters.\n     */\n    setWeights(weights: {[key: string]: tf.Tensor}) {\n        Object.entries(weights)\n            .forEach(([key, tensor]) => {\n                // TODO: Can we make this less ugly ?\n                switch (key) {\n                case 'lstmKernel':\n                    this.lstmKernel = tensor;\n                    break;\n                case 'lstmBias':\n                    this.lstmBias = tensor;\n                    break;\n                case 'lstmForgetBias':\n                    this.lstmForgetBias = tensor;\n                    break;\n                case 'lstmInitH':\n                    this.lstmInitH = tensor;\n                    break;\n                case 'lstmInitC':\n                    this.lstmInitC = tensor;\n                    break;\n                case 'denseWeights':\n                    this.denseWeights = tensor;\n                    break;\n                case 'denseBias':\n                    this.denseBias = tensor;\n                    break;\n                default:\n                    break;\n                }\n            });\n    }\n\n    /**\n     * Return all the LSTM model parameters.\n     */\n    getWeights(): {[key: string]: tf.Tensor} {\n        return {\n            lstmKernel: this.lstmKernel.clone(),\n            lstmBias: this.lstmBias.clone(),\n            lstmForgetBias: this.lstmForgetBias.clone(),\n            lstmInitH: this.lstmInitH.clone(),\n            lstmInitC: this.lstmInitC.clone(),\n            denseWeights: this.denseWeights.clone(),\n            denseBias: this.denseBias.clone()\n        };\n    }\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import * as tf from '@tensorflow/tfjs';\nimport { Featurizer } from './featurizer';\nimport { LSTM } from './lstm';\nimport { Story } from './state';\n\nexport type TrainingMetrics = {epoch: number, loss: number, accuracy: number};\ntype TrainingCallback = (metrics: TrainingMetrics[]) => any;\n\n/**\n * An implementation of Hybrid Code Networks(*) dialog manager.\n *\n * (*): Williams, Asadi, Zweig - 2017.\n *      Hybrid Code Networks: practical and efﬁcient end-to-end dialog control with supervised\n *      and reinforcement learning.\n */\nexport class HCN<Action> {\n    private actions: Action[];\n    private featurizers: Featurizer[];\n\n    private inputSize: number;\n    private outputSize: number;\n\n    private lstm: LSTM;\n    private lstmH: tf.Tensor2D;\n    private lstmC: tf.Tensor2D;\n    private lstmDropout: number;\n\n    constructor(actions: Action[], featurizers: Featurizer[], hiddenSize: number = 128,\n        optimizer: tf.Optimizer = tf.train.adam(0.01), dropout: number = 0.2) {\n        this.actions = actions;\n        this.featurizers = featurizers;\n\n        // The model input size is the sum of the sizes of features vectors.\n        this.inputSize = featurizers\n            .map((featurizer) => featurizer.size)\n            .reduce((acc, size) => acc + size, 1);\n\n        this.outputSize = actions.length;\n\n        this.lstm = new LSTM(this.inputSize, hiddenSize, this.outputSize, optimizer, dropout);\n        this.lstmDropout = dropout;\n\n        this.resetDialog();\n    }\n\n    /**\n     * Resets the state of the featurizers\n     */\n    resetDialog() {\n        this.featurizers.forEach((featurizer) => featurizer.resetDialog());\n        ({ c: this.lstmC, h: this.lstmH } = this.lstm.initLSTM());\n    }\n\n    /**\n     * Get the features vector resulted from every featurizers.\n     */\n    private async featurize(query: string): Promise<tf.Tensor1D> {\n        const features = await Promise.all(\n            this.featurizers.map((featurizer) => featurizer.handleQuery(query))\n        );\n\n        // Add a zero to make tf.concat work consistently even with only one featurizer.\n        features.push(tf.zeros([1]));\n        const featuresVec = tf.concat(features);\n\n        tf.dispose(features);\n\n        return featuresVec;\n    }\n\n    /**\n     * Trains the model on a single training story.\n     */\n    private async fitStory(story: Story, epoch: number): Promise<TrainingMetrics> {\n        this.resetDialog();\n\n        const inputs: tf.Tensor1D[] = [];\n        const targets: tf.Tensor1D[] = [];\n\n        // For each story's state...\n        for (let stateIdx = 0; stateIdx < story.length; stateIdx += 1) {\n            const state = story[stateIdx];\n\n            // The query must be featurized before moving to the next state.\n            // eslint-disable-next-line no-await-in-loop\n            inputs.push(await this.featurize(state.query));\n\n            targets.push(\n                <tf.Tensor1D> tf.oneHot(\n                    this.actions.indexOf(state.action),\n                    this.outputSize\n                )\n            );\n        }\n\n        const metrics = {\n            epoch,\n            ...tf.tidy(() => this.lstm.fitSequence(\n                    <tf.Tensor2D> tf.stack(inputs),\n                    <tf.Tensor2D> tf.stack(targets)\n            ))\n        };\n\n        // BUG: two tensors leak in the memory at each loop :/\n        tf.dispose([inputs, targets]);\n\n        return metrics;\n    }\n\n\n    /**\n     * Trains the model using the training stories.\n     */\n    async train(stories: Story[], nEpochs: number = 12,\n        onEpochEnd?: TrainingCallback): Promise<TrainingMetrics[]> {\n        const metrics: TrainingMetrics[] = [];\n\n        // For each epoch...\n        for (let epoch = 0; epoch < nEpochs; epoch += 1) {\n            let epochMetrics = [];\n\n            // For each training story...\n            stories.forEach((story) => {\n                epochMetrics.push(this.fitStory(story, epoch));\n            });\n\n            // eslint-disable-next-line no-await-in-loop\n            epochMetrics = await Promise.all(epochMetrics);\n\n            if (onEpochEnd !== undefined) {\n                onEpochEnd(epochMetrics);\n            }\n\n            metrics.push(...epochMetrics);\n        }\n\n        this.resetDialog();\n        return metrics;\n    }\n\n    /**\n     * Predict an action resulting from the given query.\n     */\n    async predict(query: string, sampleSize: number = 10,\n        temperature: number = 1): Promise<{action: Action, confidence: number}> {\n        // If the prediction is done without sampling, dropout is disabled.\n        if (sampleSize === 1) {\n            this.lstm.dropout = 0;\n        } else {\n            this.lstm.dropout = this.lstmDropout;\n        }\n\n        const features = await this.featurize(query);\n        const ys: tf.Tensor1D[] = [];\n        let prediction;\n\n        for (let i = 0; i < sampleSize; i += 1) {\n            tf.dispose(prediction);\n\n            prediction = this.lstm.predict(features, this.lstmC, this.lstmH);\n            ys.push(tf.tidy(() => prediction.y.div(temperature).softmax()));\n        }\n\n        tf.dispose([this.lstmC, this.lstmH]);\n        this.lstmC = prediction.nc.clone();\n        this.lstmH = prediction.nh.clone();\n\n        const { mean: y, variance } = tf.tidy(() => tf.moments(tf.stack(ys), 0));\n        const actionIdx = <number> tf.tidy(() => y.argMax().arraySync());\n        const confidence = <number> 1 - tf.tidy(() => variance.sqrt().arraySync()[actionIdx]);\n\n        tf.dispose([features, y, variance]);\n        tf.dispose(prediction);\n        tf.dispose(ys);\n\n        return { action: this.actions[actionIdx], confidence };\n    }\n\n    /**\n     * Load the models parameters from a JSON formatted string.\n     */\n    load(json: string) {\n        tf.tidy(() => {\n            const weights = JSON.parse(json);\n\n            // Convert arrays into tensors\n            Object.entries(weights)\n                .forEach(([key, array]) => {\n                    weights[key] = tf.tensor(<any[]> array).variable();\n                });\n\n            this.lstm.setWeights(weights);\n        });\n    }\n\n    /**\n     * Export the models parameters in a JSON format.\n     */\n    export(): string {\n        return tf.tidy(() => {\n            const weights = {};\n\n            // Convert tensors into arrays\n            Object.entries(this.lstm.getWeights())\n                .forEach(([key, tensor]) => {\n                    weights[key] = tensor.arraySync();\n                });\n\n            return JSON.stringify(weights);\n        });\n    }\n}\n","import * as tf from '@tensorflow/tfjs';\nimport * as use from '@tensorflow-models/universal-sentence-encoder';\nimport { Featurizer } from './featurizer';\n\n/**\n * Featurizes queries using the Universal Sentence Encoder model.\n */\nexport class USE implements Featurizer {\n    private encoder: use.UniversalSentenceEncoder;\n    private emptyEncoding: tf.Tensor1D;\n\n    readonly size = 512;\n\n    /**\n     * Initializes the Universal Sentence Encoder model.\n     */\n    async init() {\n        this.encoder = await use.load();\n\n        // Cache the empty string embed (for optimization purpose).\n        this.emptyEncoding = await this.encodeQuery('');\n    }\n\n    /**\n     * Encodes a query using the model.\n     */\n    private async encodeQuery(query: string): Promise<tf.Tensor1D> {\n        const embed = await this.encoder.embed([query]);\n        const squeezedEmbed = <tf.Tensor1D> embed.squeeze();\n        tf.dispose(embed);\n\n        return squeezedEmbed;\n    }\n\n    /**\n     * @return A tensor of shape [512].\n     */\n    async handleQuery(query: string): Promise<tf.Tensor1D> {\n        // When the query is empty, return the cached empty query encoding.\n        if (!query) {\n            return this.emptyEncoding.clone();\n        }\n\n        return this.encodeQuery(query);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    resetDialog() {}\n}\n","import * as tf from '@tensorflow/tfjs';\nimport { Featurizer } from './featurizer';\nimport { hashcode } from './utils/hashcode';\n\n/**\n * Featurizes queries as bag of words.\n * The algorithm use the hashing trick to avoid having to store a vocabulary in the memory.\n */\nexport class BOW implements Featurizer {\n    readonly size: number;\n\n    constructor(size: number) {\n        this.size = size;\n    }\n\n    /**\n     * @return A tensor of shape [size].\n     */\n    async handleQuery(query: string): Promise<tf.Tensor1D> {\n        return tf.tidy(() => {\n            const indexes = query.split(' ').map((word) => hashcode(word) % this.size);\n\n            return <tf.Tensor1D> tf.oneHot(indexes, this.size).asType('float32').sum(0);\n        });\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    resetDialog() {}\n}\n","/* eslint-disable no-bitwise */\n\n/**\n * Hash a string.\n * Based on https://stackoverflow.com/a/7616484\n */\nexport function hashcode(input: string) {\n    let hash = 0;\n\n    for (let i = 0; i < input.length; i += 1) {\n        const chr = input.charCodeAt(i);\n\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n\n    return hash;\n}\n","import { Story, State } from '../state';\n\n/**\n * Parse a source string formatted according the Wisty Training Story syntax.\n * Usually, this source string is extracted using fetch or from a file.\n */\nexport function parseStories(source: string): Story[] {\n    const stories: Story[] = [];\n    let story: Story = [];\n    let inputAnswered = true;\n\n    source.split('\\n').forEach((line) => {\n        const newStory = /^## *([^#].*)?$/gm.exec(line);\n        const newInput = /^> *(.*)$/gm.exec(line);\n        const newAction = /^- *(\\w*)$/gm.exec(line);\n\n        /*\n            New story\n            ## Story name\n        */\n        if (newStory != null && story.length > 0) {\n            story.push(<State> { query: '', action: 'LUS' });\n            stories.push(story); // Push previous story.\n            story = [];\n\n        /*\n            New user input\n            > user input\n        */\n        } else if (newInput != null) {\n            // Add a LUS action to mark the end of the previous turn.\n            if (story.length > 0) story.push(<State> { query: '', action: 'LUS' });\n\n            story.push(<State> { query: newInput[1], action: undefined });\n            inputAnswered = false;\n\n        /*\n            New bot action\n            (> user input)\n            (- action_name)\n            - action_name\n        */\n        } else if (newAction != null && inputAnswered) {\n            story.push(<State> { query: '', action: newAction[1] });\n\n        /*\n            New bot action (first answer)\n            (> user input)\n            - action_name\n        */\n        } else if (newAction != null && !inputAnswered) {\n            // eslint-disable-next-line prefer-destructuring\n            story[story.length - 1].action = newAction[1];\n            inputAnswered = true;\n        }\n    });\n\n    // Finalize the last story\n    if (story.length > 0) {\n        story.push(<State> { query: '', action: 'LUS' });\n        stories.push(story);\n    }\n\n    return stories;\n}\n"],"names":["LSTM","constructor","inputSize","hiddenSize","outputSize","optimizer","dropout","tf","adam","lstmKernel","randomVariable","lstmBias","lstmForgetBias","lstmInitH","lstmInitC","denseWeights","denseBias","shape","scalar","randomTensor","asScalar","variable","initLSTM","c","this","clone","h","predict","x","nh","matMul","add","squeeze","nc","fitSequence","inputSeq","targetSeq","loss","accuracy","minimize","predSeq","unstack","map","pred","y","lossScalar","softmaxCrossEntropy","arraySync","categoricalAccuracy","mean","setWeights","weights","Object","entries","forEach","tensor","getWeights","_Pact","prototype","then","onFulfilled","onRejected","result","state","s","callback","_settle","v","e","o","_this","value","pact","bind","observer","_isSettledPact","thenable","_for","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","Symbol","iterator","asyncIterator","HCN","actions","featurizers","featurizer","size","reduce","acc","length","lstm","lstmDropout","resetDialog","lstmC","lstmH","featurize","query","Promise","all","handleQuery","features","push","featuresVec","fitStory","story","epoch","metrics","_this2","inputs","targets","stateIdx","indexOf","action","train","stories","nEpochs","onEpochEnd","epochMetrics","_this3","undefined","sampleSize","temperature","_this4","prediction","ys","i","div","softmax","actionIdx","argMax","confidence","variance","sqrt","load","json","JSON","parse","export","stringify","USE","init","use","encoder","encodeQuery","emptyEncoding","embed","squeezedEmbed","BOW","indexes","split","word","input","hash","charCodeAt","hashcode","asType","sum","source","inputAnswered","line","newStory","exec","newInput","newAction"],"mappings":"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"}