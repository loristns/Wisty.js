{"version":3,"file":"wisty.umd.js","sources":["../src/featurizers/featurizer.ts","../src/utils/levenshtein_distance.ts","../src/utils/fuzzy_match.ts","../src/utils/hashcode.ts","../src/utils/initialize_variable.ts","../src/utils/lstm.ts","../src/featurizers/action_featurizer.ts","../src/featurizers/bow.ts","../src/featurizers/use.ts","../src/featurizers/word_embedding.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/models/hcn.ts","../src/slots/slot.ts","../src/slots/categorical_slot.ts","../src/tools/parse_stories.ts","../src/tools/train_test_split.ts","../src/tools/nlu_formatter.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs';\n\ntype JSONSerializable = {[key: string]: any};\n\n/**\n * A stateful featurizer that turns queries into numerical representations.\n *\n * @abstract\n */\nexport class Featurizer {\n    /**\n     * An ID used by models for exportations.\n     */\n    readonly id: string;\n\n    /**\n     * The list of every action the model can take.\n     */\n    protected actions: any[];\n\n    /**\n     * The size of the vector returned by the featurizer.\n     * By default it's set to 1 which is the default for a featurizer that returns no features.\n     */\n    readonly size: number = 1;\n\n    /**\n     * Initialize the model, can be asynchronous async code.\n     *\n     * This method is executed by the model during it's initialization,\n     * it will also set the actions attribute.\n     */\n    async init(actions: any[]) {\n        this.actions = actions;\n    }\n\n    /**\n     * Featurizes and handle a text query.\n     *\n     * @remarks\n     * This method can directly return a 1D tensor to provide features to the model.\n     * Alternatively, it can returns data of any type if the Featurizer implement a custom\n     * getOptimizableFeatures method to handle those data.\n     * If this method doesn't return something, no features will be passed to the model.\n     */\n    // eslint-disable-next-line no-unused-vars, class-methods-use-this, no-empty-function\n    async handleQuery(query: string): Promise<any> {}\n\n    /**\n     * Turn the data returned by handleQuery into an embedding vector.\n     * This function is used to expose featurizer variables to the model optimizer for training.\n     *\n     * Reimplementing this method is not necessary if your featurizer is not meant to be optimizable\n     * through gradient descent.\n     * In this case, just return the feature vector directly using the handleQuery method.\n     *\n     * @remarks\n     * It's important to keep this function stateless, it should only depend of its tensor argument\n     * and of featurizer's variables.\n     */\n    // eslint-disable-next-line class-methods-use-this\n    getOptimizableFeatures(data: any): tf.Tensor1D {\n        if (data === undefined) {\n            return tf.zeros([1]);\n        }\n\n        return <tf.Tensor1D> data;\n    }\n\n    /**\n     * Let the featurizer know what action the model has taken.\n     */\n    // eslint-disable-next-line no-unused-vars, class-methods-use-this\n    handleAction(action: any): void {}\n\n    /**\n     * Produce an action mask according to featurizer state.\n     * (Generally, this method is reimplemented in stateful featurizers)\n     *\n     * @returns An array of boolean mapping every actions availability.\n     */\n    getActionMask(): boolean[] {\n        return this.actions.map(() => true);\n    }\n\n    /**\n     * Resets the state of the featurizer (if the stateful feature is used).\n     */\n    // eslint-disable-next-line class-methods-use-this\n    resetDialog(): void {}\n\n    /**\n     * Load parameters extracted from a JSON-like document.\n     */\n    // eslint-disable-next-line no-unused-vars, class-methods-use-this\n    load(parameters: JSONSerializable) {}\n\n    /**\n     * Export the featurizer's internal parameters to be serialized along the model.\n     */\n    // eslint-disable-next-line class-methods-use-this\n    async export(): Promise<JSONSerializable> {\n        return {};\n    }\n}\n","/**\n * Compute the Levenshtein distance between two strings using the\n * [Wagner-Fisher algorithm](https://en.wikipedia.org/wiki/Wagner%E2%80%93Fischer_algorithm).\n */\nexport function levenshteinDistance(s1: string, s2: string): number {\n    const d = Array.from(\n        Array(s1.length + 1),\n        () => new Array(s2.length + 1).fill(0)\n    );\n\n    for (let i = 1; i <= s1.length; i += 1) {\n        d[i][0] = i;\n    }\n\n    for (let j = 1; j <= s2.length; j += 1) {\n        d[0][j] = j;\n    }\n\n    for (let j = 0; j < s2.length; j += 1) {\n        for (let i = 0; i < s1.length; i += 1) {\n            const substitutionCost = (s1[i] !== s2[j]) ? 1 : 0;\n\n            d[i + 1][j + 1] = Math.min(\n                d[i][j + 1] + 1,\n                d[i + 1][j] + 1,\n                d[i][j] + substitutionCost\n            );\n        }\n    }\n\n    return d[s1.length][s2.length] / Math.max(s1.length, s2.length, 1);\n}\n","import { levenshteinDistance } from './levenshtein_distance';\n\ntype Match = { extract: string, score: number };\n\nexport function fuzzyMatch(text: string, substring: string): Match {\n    let bestMatch: Match = { extract: undefined, score: 0 };\n\n    for (let i = 0; i < text.length; i += 1) {\n        const extract = text.substring(i, i + substring.length);\n\n        const aMatch = {\n            extract,\n            score: 1 - levenshteinDistance(extract, substring)\n        };\n\n        if (aMatch.score === 1) {\n            return aMatch;\n        }\n\n        if (aMatch.score > bestMatch.score) {\n            bestMatch = aMatch;\n        }\n    }\n\n    return bestMatch;\n}\n","/* eslint-disable no-bitwise */\n\n/**\n * Hash a string.\n * Based on https://stackoverflow.com/a/7616484\n */\nexport function hashcode(input: string) {\n    let hash = 0;\n\n    for (let i = 0; i < input.length; i += 1) {\n        const chr = input.charCodeAt(i);\n\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n\n    return hash;\n}\n","import * as tf from '@tensorflow/tfjs';\n\n/**\n * Initialize a variable of a given shape.\n */\nexport function initializeVariable(shape: number[], scalar: boolean = false,\n    init: 'he'|'zeros'|'normal' = 'he'): tf.Variable {\n    return tf.tidy(() => {\n        let initializer;\n\n        switch (init) {\n        case 'he':\n            initializer = tf.initializers.heNormal({});\n            break;\n\n        case 'zeros':\n            initializer = tf.initializers.zeros();\n            break;\n\n        case 'normal':\n            initializer = tf.initializers.randomNormal({});\n            break;\n\n        default:\n            throw new Error(\n                `Expected parameter init to take value 'he', 'zeros' or 'normal' not '${init}'.`\n            );\n        }\n\n        let randomTensor = initializer.apply(shape);\n        if (scalar) randomTensor = randomTensor.asScalar();\n\n        return randomTensor.variable();\n    });\n}\n","import * as tf from '@tensorflow/tfjs';\nimport { initializeVariable } from './initialize_variable';\n\ntype LSTMPrediction = {y: tf.Tensor1D, nc: tf.Tensor2D, nh: tf.Tensor2D};\n\n/**\n * An LSTM cell with a dense layer on its top.\n */\nexport class LSTM {\n    // LSTM parameters :\n    private lstmKernel: tf.Tensor;\n    private lstmBias: tf.Tensor;\n    private lstmForgetBias: tf.Tensor;\n    private lstmInitH: tf.Tensor;\n    private lstmInitC: tf.Tensor;\n\n    // Dense layer parameters :\n    private denseWeights: tf.Tensor;\n    private denseBias: tf.Tensor;\n\n    // Let dropout be public to allow to change its value when training/inference.\n    public dropout: number;\n\n    /**\n     * @param inputSize The dimension of the input data.\n     * @param hiddenSize The dimension of the output of the LSTM, passed to the dense layer.\n     * @param outputSize The dimension of the output data.\n     * @param dropout The dropout rate between the LSTM cell and the dense layer.\n     */\n    constructor(inputSize: number, hiddenSize: number, outputSize: number, dropout: number = 0.2) {\n        this.lstmKernel = initializeVariable([inputSize + hiddenSize, hiddenSize * 4]);\n        this.lstmBias = initializeVariable([hiddenSize * 4], false, 'zeros');\n        this.lstmForgetBias = initializeVariable([1], true, 'zeros'); // (scalar)\n        this.lstmInitH = initializeVariable([1, hiddenSize]);\n        this.lstmInitC = initializeVariable([1, hiddenSize]);\n\n        this.denseWeights = initializeVariable([hiddenSize, outputSize]);\n        this.denseBias = initializeVariable([outputSize], false, 'zeros');\n\n        this.dropout = dropout;\n    }\n\n    /**\n     * Gives the initial state values of the LSTM (c and h).\n     *\n     * @param clone If it is necessary to clone states variable or no.\n     */\n    initLSTM(clone: boolean = true): {c: tf.Tensor2D, h: tf.Tensor2D} {\n        return {\n            c: <tf.Tensor2D> (clone ? this.lstmInitC.clone() : this.lstmInitC),\n            h: <tf.Tensor2D> (clone ? this.lstmInitH.clone() : this.lstmInitH)\n        };\n    }\n\n    /**\n     * Make a prediction given an input and state values (c and h).\n     * @param x A vector of shape [inputSize].\n     * @param c LSTM's state value.\n     * @param h LSTM's last output value.\n     * @param mask A vector of ones and zeros of shape [outputSize].\n     */\n    predict(x: tf.Tensor1D, c: tf.Tensor2D, h: tf.Tensor2D, mask?: tf.Tensor1D,\n        temperature: number = 1): LSTMPrediction {\n        return tf.tidy(() => {\n            // Execute the LSTM cell.\n            const [nc, nh] = tf.basicLSTMCell(\n                <tf.Scalar> this.lstmForgetBias,\n                <tf.Tensor2D> this.lstmKernel,\n                <tf.Tensor1D> this.lstmBias,\n                <tf.Tensor2D> tf.stack([x]),\n                h, c\n            );\n\n            // Execute the dense layer on top of the LSTM cell.\n            let y = <tf.Tensor1D> tf\n                .dropout(nh, this.dropout)\n                .matMul(this.denseWeights)\n                .add(this.denseBias)\n                .squeeze()\n                .div(temperature)\n                .softmax()\n                .mul(mask ?? 1);\n\n            // Apply normalization after the mask to get probabilities.\n            y = y.div(tf.sum(y));\n\n            return { y, nc, nh };\n        });\n    }\n\n    /**\n     * Update the given model parameters.\n     */\n    load(weights: {[key: string]: any}) {\n        tf.tidy(() => {\n            // Convert every parameter to a tf variable tensor.\n            this.lstmKernel = tf.tensor(weights.lstmKernel).variable();\n            this.lstmBias = tf.tensor(weights.lstmBias).variable();\n            this.lstmForgetBias = tf.tensor(weights.lstmForgetBias).variable();\n            this.lstmInitH = tf.tensor(weights.lstmInitH).variable();\n            this.lstmInitC = tf.tensor(weights.lstmInitC).variable();\n            this.denseWeights = tf.tensor(weights.denseWeights).variable();\n            this.denseBias = tf.tensor(weights.denseBias).variable();\n        });\n    }\n\n    /**\n     * Return all the LSTM model parameters.\n     */\n    async export(): Promise<{[key: string]: any}> {\n        const exports = {\n            lstmKernel: await this.lstmKernel.array(),\n            lstmBias: await this.lstmBias.array(),\n            lstmForgetBias: await this.lstmForgetBias.array(),\n            lstmInitH: await this.lstmInitH.array(),\n            lstmInitC: await this.lstmInitC.array(),\n            denseWeights: await this.denseWeights.array(),\n            denseBias: await this.denseBias.array()\n        };\n\n        return exports;\n    }\n}\n","import * as tf from '@tensorflow/tfjs';\nimport { Featurizer } from './featurizer';\nimport { initializeVariable } from '../utils';\n\n/**\n * Parameters for ActionFeaturizer constructor.\n */\ninterface ActionFeaturizerArgs {\n    /**\n     * Enable the masking of LUS when the user has just talked.\n     * Enabled by default.\n     */\n    maskLUS?: boolean;\n\n    /**\n     * Enable the masking of the previous action.\n     * Enabled by default.\n     */\n    maskPreviousAction?: boolean;\n\n    /**\n     * The action the bot takes to let the user talk.\n     * Default to 'LUS' (acronym for Let User Speak).\n     */\n    LUSAction?: string;\n}\n\n/**\n * Rule-based featurizer improving model robustness.\n *\n * - Featurize the previous action the model has taken.\n * - Mask the LUS action when the user has just talked.\n *   (Force the model to reply at least once)\n * - Mask the previous action.\n *   (Prevent looping : the model can't take two times in a row the same action)\n */\nexport class ActionFeaturizer extends Featurizer {\n    readonly id = 'Action Featurizer';\n    size: number;\n\n    private LUSAction: any;\n    private maskLUS: boolean;\n    private maskPreviousAction: boolean;\n\n    private userTalked: boolean;\n    private previousAction: any;\n\n    private embeddings: tf.Tensor;\n\n    constructor({\n        maskLUS = true,\n        maskPreviousAction = true,\n        LUSAction = 'LUS'\n    }: ActionFeaturizerArgs = { maskLUS: true, maskPreviousAction: true, LUSAction: 'LUS' }) {\n        super();\n        this.maskLUS = maskLUS;\n        this.maskPreviousAction = maskPreviousAction;\n        this.LUSAction = LUSAction;\n\n        this.resetDialog();\n    }\n\n    async init(actions: any[]) {\n        await super.init(actions);\n\n        this.size = actions.length;\n        this.embeddings = initializeVariable([this.size, this.size]);\n    }\n\n    async handleQuery(query: string): Promise<tf.Tensor2D> {\n        return tf.tidy(() => {\n            this.userTalked = query !== '';\n\n            // One-hot encode the previous action.\n            return <tf.Tensor2D> tf.oneHot(\n                [this.actions.indexOf(this.previousAction)],\n                this.actions.length\n            );\n        });\n    }\n\n    getOptimizableFeatures(data: tf.Tensor2D): tf.Tensor1D {\n        return <tf.Tensor1D> data.matMul(this.embeddings).squeeze();\n    }\n\n    handleAction(action: any) {\n        // Store the new action if it's not the LUS action.\n        this.previousAction = action !== this.LUSAction ? action : this.previousAction;\n    }\n\n    getActionMask(): boolean[] {\n        const mask = super.getActionMask();\n\n        // Mask LUS when the user talk and the option is enabled.\n        if (this.maskLUS && this.userTalked) {\n            mask[this.actions.indexOf(this.LUSAction)] = false;\n        }\n\n        // Mask the previous action when the option is enabled and if applicable.\n        if (this.maskPreviousAction && this.actions.includes(this.previousAction)) {\n            mask[this.actions.indexOf(this.previousAction)] = false;\n        }\n\n        return mask;\n    }\n\n    resetDialog() {\n        this.userTalked = false;\n        this.previousAction = undefined;\n    }\n\n    load(parameters: {embeddings: number[][]}) {\n        this.embeddings = tf.tidy(() => tf.tensor(parameters.embeddings).variable());\n    }\n\n    async export(): Promise<{embeddings: number[][]}> {\n        return {\n            embeddings: <number[][]> await this.embeddings.array()\n        };\n    }\n}\n","import * as tf from '@tensorflow/tfjs';\nimport { Featurizer } from './featurizer';\nimport { hashcode } from '../utils';\n\n/**\n * Featurizes queries as bag of words.\n *\n * The algorithm uses the [hashing trick](https://en.wikipedia.org/wiki/Feature_hashing) to avoid\n * having to store a vocabulary in the memory.\n */\nexport class BOW extends Featurizer {\n    readonly id = 'Bag-of-Words';\n    readonly size: number;\n\n    /**\n     * @param size The vocabulary size you allow to the featurizer.\n     */\n    constructor(size: number) {\n        super();\n        this.size = size;\n    }\n\n    async handleQuery(query: string): Promise<tf.Tensor1D> {\n        return tf.tidy(() => {\n            const indexes = query.toLowerCase()\n                .split(/\\W/g)\n                .map((word) => hashcode(word) % this.size);\n\n            return <tf.Tensor1D> tf.oneHot(indexes, this.size).asType('float32').sum(0);\n        });\n    }\n}\n","import * as tf from '@tensorflow/tfjs';\nimport * as use from '@tensorflow-models/universal-sentence-encoder';\nimport { Featurizer } from './featurizer';\n\n/**\n * Featurizes queries using the Universal Sentence Encoder model.\n */\nexport class USE extends Featurizer {\n    readonly id = 'Universal Sentence Encoder';\n\n    private encoder: use.UniversalSentenceEncoder;\n    private emptyEncoding: tf.Tensor1D;\n\n    readonly size = 512;\n\n    async init(actions: any[]) {\n        await super.init(actions);\n        this.encoder = await use.load();\n\n        // Cache the empty string embed (for optimization purpose).\n        this.emptyEncoding = await this.encodeQuery('');\n    }\n\n    /**\n     * Encodes a query using the model.\n     */\n    private async encodeQuery(query: string): Promise<tf.Tensor1D> {\n        const embed = await this.encoder.embed([query]);\n        const squeezedEmbed = <tf.Tensor1D> embed.squeeze();\n        tf.dispose(embed);\n\n        return squeezedEmbed;\n    }\n\n    async handleQuery(query: string): Promise<tf.Tensor1D> {\n        // When the query is empty, return the cached empty query encoding.\n        if (!query) {\n            return this.emptyEncoding.clone();\n        }\n\n        return this.encodeQuery(query);\n    }\n}\n","import * as tf from '@tensorflow/tfjs';\nimport { Featurizer } from './featurizer';\nimport { levenshteinDistance } from '../utils';\n\n/**\n * Featurize queries by pooling words embedding using SWEM-concat(*).\n *\n * (*): Dinghan Shen, Guoyin Wang, Wenlin Wang, Martin Renqiang Min, Qinliang Su, Yizhe Zhang,\n *      Chunyuan Li, Ricardo Henao, Lawrence Carin- 2018.\n *      Baseline Needs More Love: On Simple Word-Embedding-Based Models and\n *      Associated Pooling Mechanisms.\n */\nexport class WordEmbedding extends Featurizer {\n    readonly id = 'Word Embedding';\n    readonly size: number;\n\n    private loaderFunction: () => Promise<string>;\n    private vectors: {[word: string]: number[]};\n\n    /**\n     * @param loaderFunction A function that returns the json string containing the embedding.\n     * @param size The dimension of the word embedding\n     */\n    constructor(loaderFunction: () => Promise<string>, size: number) {\n        super();\n        this.size = 2 * size;\n        this.loaderFunction = loaderFunction;\n    }\n\n    async init(actions: any[]) {\n        await super.init(actions);\n        this.vectors = JSON.parse(await this.loaderFunction());\n    }\n\n    async handleQuery(query: string): Promise<tf.Tensor1D> {\n        return <tf.Tensor1D> tf.tidy(() => {\n            const tokens = query.toLowerCase() // Word embeddings are uncased.\n                .split(/\\W/g) // Tokenize at each non-word character.\n                .filter((token) => token.length > 0);\n\n            const embeddings: tf.Tensor1D[] = [];\n\n            tokens.forEach((token) => {\n                // If the token in in the vocabulary, just use its embedding.\n                if (Object.keys(this.vectors).includes(token)) {\n                    embeddings.push(tf.tensor(this.vectors[token]));\n\n                // If the token is out of vocabulary, use the most similarly spelled token instead.\n                } else {\n                    let bestToken: string;\n                    let lowestDistance: number = Infinity;\n\n                    Object.keys(this.vectors).forEach((vocabToken) => {\n                        const distance = levenshteinDistance(vocabToken, token);\n\n                        if (distance < lowestDistance) {\n                            bestToken = vocabToken;\n                            lowestDistance = distance;\n                        }\n                    });\n\n                    if (lowestDistance < 0.5) {\n                        embeddings.push(tf.tensor(this.vectors[bestToken]));\n                    }\n                }\n            });\n\n            // When there is no embeddable tokens, return a zeros vector.\n            if (embeddings.length === 0) {\n                return tf.zeros([this.size]);\n            }\n\n            const embeddingsMatrix = tf.stack(embeddings);\n\n            return tf.concat([embeddingsMatrix.mean(0), embeddingsMatrix.max(0)]);\n        });\n    }\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import * as tf from '@tensorflow/tfjs';\nimport { Featurizer } from '../featurizers';\nimport { LSTM, Story, Metrics } from '../utils';\n\ninterface SampleData {\n    targets: tf.Tensor1D,\n    predictions: tf.Tensor1D,\n    loss: number,\n    isFailing: boolean\n}\n\n/**\n * @callback\n */\ntype TrainingCallback = (metrics: Metrics) => void;\n\n/**\n * Parameters for HCN constructor.\n */\ninterface HCNConstructorArgs {\n    /**\n     * The list of actions the model can take.\n     * (keeping the order the same is important for pretrained models)\n     */\n    actions: string[];\n\n    /**\n     * The list of featurizers the model uses.\n     * (keeping the order the same is important for pretrained models)\n     */\n    featurizers: Featurizer[];\n\n    /**\n     * The output size of the LSTM cell.\n     * Default is set to 32 units.\n     */\n    hiddenSize?: number;\n\n    /**\n     * The optimization algorithm used for training.\n     * By default, Adam with a learning rate of 0.01 is used.\n     */\n    optimizer?: tf.Optimizer;\n\n    /**\n     * Temperature of the model softmax, used to calibrate confidence estimation.\n     * By default, the temperature is 1 but you usually want it higher to make less overconfident.\n     */\n    temperature?: number;\n\n    /**\n     * The percentage of units to dropout between the LSTM cell layer and the dense.\n     * Useful for regularizing the model. It's disabled by default (value = 0).\n     */\n    dropout?: number;\n}\n\n/**\n * Parameters for HCN train method.\n */\ninterface HCNTrainArgs {\n    /**\n     * Training stories to learn from.\n     */\n    stories: Story[];\n\n    /**\n     * Number of times the model will be passed the whole set of training stories during training.\n     * Default is set to 12 epochs.\n     */\n    nEpochs?: number;\n\n    /**\n     * After each epoch, this callback function will be executed with the metrics collected\n     * during the epoch.\n     */\n    onEpochEnd?: TrainingCallback;\n}\n\n/**\n * An implementation of Hybrid Code Networks(*) dialog manager.\n *\n * (*): Williams, Asadi, Zweig - 2017.\n *      Hybrid Code Networks: practical and efﬁcient end-to-end dialog control with supervised\n *      and reinforcement learning.\n */\nexport class HCN {\n    private actions: string[];\n    private featurizers: Featurizer[];\n    private optimizer: tf.Optimizer;\n\n    private inputSize: number;\n    private hiddenSize: number;\n    private outputSize: number;\n\n    private lstm: LSTM;\n    private lstmH: tf.Tensor2D;\n    private lstmC: tf.Tensor2D;\n    private lstmTemperature: number;\n    private lstmDropout: number;\n\n    /**\n     * Defines the model.\n     *\n     * To fully initialize the model, run the async *init()* method.\n     */\n    constructor({\n        actions,\n        featurizers,\n        hiddenSize = 32,\n        optimizer = tf.train.adam(0.01),\n        temperature = 1,\n        dropout = 0\n    }: HCNConstructorArgs) {\n        this.actions = actions;\n        this.featurizers = featurizers;\n        this.optimizer = optimizer;\n\n        this.hiddenSize = hiddenSize;\n        this.outputSize = actions.length;\n\n        this.lstmTemperature = temperature;\n        this.lstmDropout = dropout;\n    }\n\n    /**\n     * Initialize the model and its featurizers.\n     */\n    async init() {\n        // Initialize asynchronously all featurizers.\n        await Promise.all(\n            this.featurizers.map((featurizer) => featurizer.init(this.actions))\n        );\n\n        // The model input size is the sum of the sizes of features vectors.\n        this.inputSize = this.featurizers\n            .map((featurizer) => featurizer.size)\n            .reduce((acc, size) => acc + size, 1);\n\n        this.lstm = new LSTM(this.inputSize, this.hiddenSize, this.outputSize, this.lstmDropout);\n\n        this.resetDialog();\n    }\n\n    /**\n     * Resets the state of the model and its featurizers.\n     */\n    resetDialog() {\n        this.featurizers.forEach((featurizer) => featurizer.resetDialog());\n        ({ c: this.lstmC, h: this.lstmH } = this.lstm.initLSTM());\n    }\n\n    /**\n     * Get the data returned from every featurizer's handleQuery method.\n     */\n    private async handleQuery(query: string): Promise<any[]> {\n        return Promise.all(\n            this.featurizers.map((featurizer) => featurizer.handleQuery(query))\n        );\n    }\n\n    /**\n     * Get the embedding vector resulted from every featurizers.\n     */\n    private getOptimizableFeatures(features: tf.Tensor[]): tf.Tensor1D {\n        return tf.tidy(() => {\n            const embeddings = this.featurizers.map(\n                (featurizer, idx) => featurizer.getOptimizableFeatures(features[idx])\n            );\n\n            // Add a zero to make tf.concat work consistently even with only one featurizer.\n            embeddings.push(tf.zeros([1]));\n\n            return <tf.Tensor1D> tf.concat(embeddings);\n        });\n    }\n\n    /**\n     * Inform every featurizers of the taken action.\n     */\n    private handleAction(action: string) {\n        this.featurizers.map((featurizer) => featurizer.handleAction(action));\n    }\n\n    /**\n     * Get the final action mask resulted from every featurizers.\n     */\n    private getActionMask(): tf.Tensor1D {\n        return tf.tidy(() => this.featurizers\n            // Get action mask and convert them to tensors.\n            .map((featurizer) => <tf.Tensor1D> tf.tensor(\n                featurizer.getActionMask(),\n                undefined, 'float32'\n            ))\n            // Compute the product of every masks.\n            .reduce((acc, mask) => tf.mul(acc, mask), tf.ones([this.actions.length])));\n    }\n\n    /**\n     * Trains the model on a single training story.\n     */\n    private async fitStory(story: Story): Promise<SampleData> {\n        this.resetDialog();\n\n        // 1. Prepare the input data.\n        const inputs: any[][] = [];\n        const masks: tf.Tensor1D[] = [];\n        const targets: tf.Tensor1D[] = [];\n\n        // For each story's state...\n        for (let stateIdx = 0; stateIdx < story.length; stateIdx += 1) {\n            const state = story[stateIdx];\n\n            // The query must be featurized before moving to the next state.\n            // eslint-disable-next-line no-await-in-loop\n            inputs.push(await this.handleQuery(state.query));\n\n            masks.push(this.getActionMask());\n\n            targets.push(\n                <tf.Tensor1D> tf.oneHot(\n                    this.actions.indexOf(state.action),\n                    this.outputSize\n                )\n            );\n\n            this.handleAction(state.action);\n        }\n\n        // 2. Fit the sequence.\n        let data: SampleData;\n\n        this.optimizer.minimize(() => {\n            let { c, h } = this.lstm.initLSTM(false);\n\n            // Make a prediction for each step of the input sequence.\n            const predictions = inputs.map((features, idx) => {\n                const statePred = this.lstm.predict(\n                    <tf.Tensor1D> this.getOptimizableFeatures(features),\n                    <tf.Tensor2D> c,\n                    <tf.Tensor2D> h,\n                    <tf.Tensor1D> masks[idx]\n                );\n\n                c = statePred.nc;\n                h = statePred.nh;\n\n                return statePred.y;\n            });\n\n            const targetsMatrix = tf.stack(targets);\n            const predictionsMatrix = tf.stack(predictions);\n\n            // Compare the predicted sequence with the target.\n            const lossScalar = <tf.Scalar> tf.metrics.categoricalCrossentropy(\n                targetsMatrix, predictionsMatrix\n            ).mean();\n\n            // Store the necessary data to build metrics.\n            data = {\n                targets: tf.keep(targetsMatrix.argMax(1)),\n                predictions: tf.keep(predictionsMatrix.argMax(1)),\n                loss: <number> lossScalar.arraySync(),\n                isFailing: tf.metrics\n                    .categoricalAccuracy(targetsMatrix, predictionsMatrix)\n                    .mean()\n                    .arraySync() < 0.999\n            };\n\n            // Return the loss to the optimizer to update the model.\n            return lossScalar;\n        });\n\n        // BUG: two tensors leak in the memory at each loop :/\n        tf.dispose([inputs, targets]);\n\n        return data;\n    }\n\n    /**\n     * Trains the model using the training stories.\n     *\n     * @returns Metrics collected from the last epoch (that correspond to the trained model).\n     */\n    async train({ stories, nEpochs = 12, onEpochEnd = undefined }: HCNTrainArgs): Promise<Metrics> {\n        let epochMetrics: Metrics;\n\n        // For each epoch...\n        for (let epoch = 0; epoch < nEpochs; epoch += 1) {\n            const allTargets: tf.Tensor1D[] = [];\n            const allPredictions: tf.Tensor1D[] = [];\n            const allLosses: number[] = [];\n            const failingSamples: number[] = [];\n\n            // For each training story...\n            for (let storyIdx = 0; storyIdx < stories.length; storyIdx += 1) {\n                // (Each story must be fitted sequentially)\n                // eslint-disable-next-line no-await-in-loop\n                const storyData = await this.fitStory(stories[storyIdx]);\n\n                allTargets.push(storyData.targets);\n                allPredictions.push(storyData.predictions);\n                allLosses.push(storyData.loss);\n\n                if (storyData.isFailing) {\n                    failingSamples.push(storyIdx);\n                }\n            }\n\n            // Build the metrics.\n            const confusionMatrix = tf.tidy(() => tf.math.confusionMatrix(\n                tf.concat(allTargets),\n                tf.concat(allPredictions),\n                this.outputSize\n            ));\n\n            const truePredictions = tf.tidy(() => confusionMatrix\n                .mul(tf.eye(...confusionMatrix.shape))\n                .sum(0));\n\n            epochMetrics = {\n                epoch,\n                failingSamples,\n\n                accuracy: <number> tf.tidy(() => (\n                    truePredictions.sum().div(confusionMatrix.sum()).arraySync()\n                )),\n\n                recall: <number> tf.tidy(() => (\n                    truePredictions.div(confusionMatrix.sum(1)).mean().arraySync()\n                )),\n\n                precision: <number> tf.tidy(() => (\n                    truePredictions.div(confusionMatrix.sum(0)).mean().arraySync()\n                )),\n\n                loss: allLosses.reduce((a, b) => a + b) / allLosses.length\n            };\n\n            // Clear the tensors.\n            tf.dispose(allTargets);\n            tf.dispose(allPredictions);\n            tf.dispose([truePredictions, confusionMatrix]);\n\n            if (onEpochEnd !== undefined) {\n                onEpochEnd(epochMetrics);\n            }\n        }\n\n        this.resetDialog();\n        return epochMetrics;\n    }\n\n    /**\n     * Predict an action resulting from the given query.\n     *\n     * @param query The given query from the user.\n     * @returns The predicted action from the model and its confidence.\n     */\n    async predict(query: string):\n        Promise<{action: string, confidence: number}> {\n        // At inference, dropout is disabled\n        this.lstm.dropout = 0;\n\n        const features = this.getOptimizableFeatures(await this.handleQuery(query));\n        const masks = this.getActionMask();\n\n        const prediction = this.lstm.predict(\n            features, this.lstmC, this.lstmH, masks, this.lstmTemperature\n        );\n\n        // Update lstm internal state\n        tf.dispose([this.lstmC, this.lstmH]);\n        this.lstmC = prediction.nc.clone();\n        this.lstmH = prediction.nh.clone();\n\n        const actionIdx = <number> tf.tidy(() => prediction.y.argMax().arraySync());\n        const confidence = <number> tf.tidy(() => prediction.y.arraySync()[actionIdx]);\n\n        // Clear the memory\n        tf.dispose([features, masks]);\n        tf.dispose(prediction);\n\n        // Retablish dropout (just in case)\n        this.lstm.dropout = this.lstmDropout;\n\n        this.handleAction(this.actions[actionIdx]);\n\n        return { action: this.actions[actionIdx], confidence };\n    }\n\n    /**\n     * Evaluate the model using stories.\n     *\n     * @param stories Validation stories to evaluate the model.\n     * @returns Validation metrics based on the results from the stories.\n     */\n    async score(stories: Story[]): Promise<Metrics> {\n        const targets: number[] = [];\n        const predictions: number[] = [];\n        const confidences: number[] = [];\n        const failingSamples: number[] = [];\n\n        // For each stories and states, make predictions.\n        for (let storyIdx = 0; storyIdx < stories.length; storyIdx += 1) {\n            this.resetDialog();\n\n            for (let stateIdx = 0; stateIdx < stories[storyIdx].length; stateIdx += 1) {\n                const state = stories[storyIdx][stateIdx];\n\n                // eslint-disable-next-line no-await-in-loop\n                const { action, confidence } = await this.predict(state.query);\n\n                targets.push(this.actions.indexOf(state.action));\n                predictions.push(this.actions.indexOf(action));\n                confidences.push(confidence);\n\n                if (action !== state.action && !failingSamples.includes(storyIdx)) {\n                    failingSamples.push(storyIdx);\n                }\n            }\n        }\n\n        // Build a confusion matrix out of the prediction and build the metrics.\n        const confusionMatrix = tf.tidy(() => tf.math.confusionMatrix(\n            tf.tensor(targets), tf.tensor(predictions), this.outputSize\n        ));\n\n        const truePredictions = tf.tidy(() => confusionMatrix\n            .mul(tf.eye(...confusionMatrix.shape))\n            .sum(0));\n\n        const metrics: Metrics = {\n            failingSamples,\n\n            accuracy: <number> tf.tidy(() => (\n                truePredictions.sum().div(confusionMatrix.sum()).arraySync()\n            )),\n\n            recall: <number> tf.tidy(() => (\n                truePredictions.div(confusionMatrix.sum(1)).mean().arraySync()\n            )),\n\n            precision: <number> tf.tidy(() => (\n                truePredictions.div(confusionMatrix.sum(0)).mean().arraySync()\n            )),\n\n            averageConfidence: confidences.reduce((a, b) => a + b) / confidences.length\n        };\n\n        tf.dispose([truePredictions, confusionMatrix]);\n\n        this.resetDialog();\n        return metrics;\n    }\n\n    /**\n     * Load the models parameters from a JSON formatted string.\n     */\n    load(json: string) {\n        const parameters = JSON.parse(json);\n\n        this.featurizers.forEach((featurizer) => {\n            featurizer.load(parameters[featurizer.id]);\n        });\n\n        this.lstm.load(parameters.lstm);\n\n        this.resetDialog();\n    }\n\n    /**\n     * Export the models parameters in a JSON format.\n     */\n    async export(): Promise<string> {\n        const parameters = { lstm: await this.lstm.export() };\n\n        for (let idx = 0; idx < this.featurizers.length; idx += 1) {\n            const featurizer = this.featurizers[idx];\n\n            // eslint-disable-next-line no-await-in-loop\n            parameters[featurizer.id] = await featurizer.export();\n        }\n\n        return JSON.stringify(parameters);\n    }\n}\n","import { Featurizer } from '../featurizers';\n\n/**\n * An extension of featurizer that holds a value in its state.\n * @abstract\n */\nexport class Slot<Value> extends Featurizer {\n    /**\n     * The list of actions that can be taken by the model only when the slot is defined.\n     */\n    private dependantActions: string[];\n\n    /**\n     * The list of actions that can be taken by the model only when the slot is undefined.\n     */\n    private invDependantActions: string[];\n\n    /**\n     * Stores the value of the slot.\n     */\n    private value: Value;\n\n    /**\n     * @param dependantActions The list of actions that can be taken by the model\n     *                         only when the slot is defined.\n     * @param invDependantActions The list of actions that can be taken by the model\n     *                            only when the slot is undefined.\n     */\n    constructor(dependantActions: string[], invDependantActions: string[]) {\n        super();\n        this.dependantActions = dependantActions;\n        this.invDependantActions = invDependantActions;\n    }\n\n    getActionMask(): boolean[] {\n        return this.actions.map((action) => {\n            const isDefined = this.value !== undefined;\n            const isDependant = this.dependantActions.includes(action);\n            const isInvDependant = this.invDependantActions.includes(action);\n\n            return (!isDefined && (!isDependant || isInvDependant))\n                || (isDefined && !isInvDependant);\n        });\n    }\n\n    resetDialog(): void {\n        this.value = undefined;\n    }\n\n    /**\n     * Retrieves the value of the slot.\n     */\n    getValue(): Value {\n        return this.value;\n    }\n\n    /**\n     * Redefine a new value for the slot.\n     */\n    setValue(value: Value) {\n        this.value = value;\n    }\n}\n","import * as tf from '@tensorflow/tfjs';\nimport { Slot } from './slot';\nimport { fuzzyMatch } from '../utils';\n\ntype Categories = {[category: string]: string[]};\ntype CategoricalValue = { category: string, extract: string, score: number };\n\n/**\n * Parameters for Categorical Slot constructor.\n */\ninterface CategoricalSlotArgs {\n    /**\n     * The name of the slot.\n     */\n    name: string;\n\n    /**\n     * An object with the name of the category as a key and an array of synonyms that belong to\n     * the category as a value.\n     */\n    categories: Categories;\n\n    /**\n     * The list of actions that can be taken by the model only when the slot is defined.\n     */\n    dependantActions?: string[];\n\n    /**\n     * The list of actions that can be taken by the model only when the slot is undefined.\n     */\n    invDependantActions?: string[];\n\n    /**\n     * The minimum similarity to get selected as a value. (based on Leveinshtein Distance)\n     */\n    threshold?: number;\n}\n\n/**\n * A slot that stores a categorical value extracted using fuzzy string matching.\n */\nexport class CategoricalSlot extends Slot<CategoricalValue> {\n    readonly id: string;\n    readonly size: number;\n\n    private categoryNames: string[];\n    private categories: Categories;\n\n    private threshold: number;\n\n    constructor({\n        name,\n        categories,\n        dependantActions = [],\n        invDependantActions = [],\n        threshold = 0.75\n    }: CategoricalSlotArgs) {\n        super(dependantActions, invDependantActions);\n\n        this.categoryNames = Object.keys(categories);\n        this.categories = categories;\n        this.threshold = threshold;\n\n        this.id = `${name}#Categorical`;\n        this.size = 2 * this.categoryNames.length;\n    }\n\n    async init(actions: any[]) {\n        await super.init(actions);\n        this.resetDialog();\n    }\n\n    private oneHotValue(value: CategoricalValue): tf.Tensor1D {\n        const categoryNames = Object.keys(this.categories);\n\n        return <tf.Tensor1D> tf.oneHot(\n            categoryNames.indexOf(value.category),\n            categoryNames.length\n        );\n    }\n\n    async handleQuery(query: string): Promise<tf.Tensor1D> {\n        const previousValue = this.getValue();\n        let bestValue: CategoricalValue = { category: undefined, extract: undefined, score: 0 };\n\n        // For each category...\n        Object.entries(this.categories).forEach(([category, keywords]) => {\n            // Find the best match of the category.\n            const match = keywords\n                .map((keyword) => fuzzyMatch(query.toLowerCase(), keyword.toLowerCase()))\n\n                .filter((m) => m.score >= this.threshold)\n\n                .reduce(\n                    (hm, m) => (hm.score > m.score ? hm : m),\n                    { extract: undefined, score: 0 }\n                );\n\n            // The best match is preferably a match of a different category with the highest score.\n            if (match.extract !== undefined) {\n                const currentUneqPrevious = category !== previousValue.category;\n                const bestEqPrevious = bestValue.category === previousValue.category;\n                const betterScore = match.score > bestValue.score;\n\n                if (bestValue.category === undefined\n                    || (currentUneqPrevious && betterScore)\n                    || (bestEqPrevious && currentUneqPrevious)\n                    || (bestEqPrevious && betterScore)\n                ) {\n                    bestValue = { category, ...match };\n                }\n            }\n        });\n\n        const features = tf.tidy(() => (\n            tf.concat([\n                this.oneHotValue(bestValue),\n                this.oneHotValue(this.getValue())\n            ])\n        ));\n\n        if (bestValue.category !== undefined) {\n            this.setValue(bestValue);\n        }\n\n        return features;\n    }\n\n    getValue(): CategoricalValue {\n        if (super.getValue() === undefined) {\n            return { category: undefined, extract: undefined, score: 0 };\n        }\n\n        return super.getValue();\n    }\n}\n","import { Story, State } from '../utils';\n\n/**\n * Parse a source string formatted according the Wisty Training Story syntax.\n * Usually, this source string is extracted using fetch or from a file.\n */\nexport function parseStories(source: string): Story[] {\n    const stories: Story[] = [];\n    let story: Story = [];\n    let inputAnswered = true;\n\n    source.split('\\n').forEach((line) => {\n        const newStory = /^## *([^#].*)?$/gm.exec(line);\n        const newInput = /^> *(.*)$/gm.exec(line);\n        const newAction = /^- *(\\w*)$/gm.exec(line);\n\n        /*\n            New story\n            ## Story name\n        */\n        if (newStory != null && story.length > 0) {\n            story.push(<State> { query: '', action: 'LUS' });\n            stories.push(story); // Push previous story.\n            story = [];\n\n        /*\n            New user input\n            > user input\n        */\n        } else if (newInput != null) {\n            // Add a LUS action to mark the end of the previous turn.\n            if (story.length > 0) story.push(<State> { query: '', action: 'LUS' });\n\n            story.push(<State> { query: newInput[1], action: undefined });\n            inputAnswered = false;\n\n        /*\n            New bot action\n            (> user input)\n            (- action_name)\n            - action_name\n        */\n        } else if (newAction != null && inputAnswered) {\n            story.push(<State> { query: '', action: newAction[1] });\n\n        /*\n            New bot action (first answer)\n            (> user input)\n            - action_name\n        */\n        } else if (newAction != null && !inputAnswered) {\n            // eslint-disable-next-line prefer-destructuring\n            story[story.length - 1].action = newAction[1];\n            inputAnswered = true;\n        }\n    });\n\n    // Finalize the last story\n    if (story.length > 0) {\n        story.push(<State> { query: '', action: 'LUS' });\n        stories.push(story);\n    }\n\n    return stories;\n}\n","import { Story } from '../utils';\n\n/**\n * Split a list of stories into random train and test subsets.\n *\n * @param stories A list of stories.\n * @param testSize The proportion of stories to put in the test subset.\n */\nexport function trainTestSplit(stories: Story[], testSize: number):\n    {train: Story[], test: Story[]} {\n    const test: Story[] = [];\n\n    for (let i = 0; i / stories.length < testSize; i += 1) {\n        test.push(...stories.splice(\n            Math.floor(Math.random() * stories.length), 1\n        ));\n    }\n\n    return { train: stories, test };\n}\n","import { HCN } from '../models';\nimport { Slot } from '../slots';\n\n/**\n * Parameters for NLUFormatter.\n */\ninterface NLUFormatterArgs {\n    model: HCN;\n    slots?: Slot<any>[];\n    LUSAction?: string;\n}\n\n/**\n * An NLU digests containing the input query, the list of bot action to take,\n * the overall confidence of the turn (product of action's confidences) and slots values.\n */\ninterface NLUDigest {\n    /**\n     * The raw input query.\n     */\n    query: string;\n\n    /**\n     * An array of actions names.\n     */\n    actions: string[];\n\n    /**\n     * The overall confidence of the turn.\n     */\n    turnConfidence: number;\n\n    /**\n     * The value of each slot.\n     */\n    slots: {[slot: string]: any};\n}\n\n/**\n * An utility class using HCN methods and Slots to offer an higher level API\n * looking like NLU librairies.\n */\nexport class NLUFormatter {\n    private model: HCN;\n    private slots: Slot<any>[];\n    private LUSAction: string;\n\n    constructor({\n        model,\n        slots = [],\n        LUSAction = 'LUS'\n    }: NLUFormatterArgs) {\n        this.model = model;\n        this.slots = slots;\n        this.LUSAction = LUSAction;\n    }\n\n    /**\n     * Turn a query into a NLU digest.\n     */\n    async ask(query: string): Promise<NLUDigest> {\n        const digest: NLUDigest = {\n            query,\n            actions: [],\n            turnConfidence: 1,\n            slots: {}\n        };\n\n        let { action, confidence } = await this.model.predict(query);\n\n        while (action !== this.LUSAction) {\n            digest.actions.push(action);\n            digest.turnConfidence *= confidence;\n\n            // eslint-disable-next-line no-await-in-loop\n            ({ action, confidence } = await this.model.predict(''));\n        }\n\n        this.slots.forEach((slot) => {\n            digest.slots[slot.id] = slot.getValue();\n        });\n\n        return digest;\n    }\n\n    /**\n     * Reset the model state.\n     */\n    resetDialog() {\n        this.model.resetDialog();\n    }\n}\n"],"names":["Featurizer","this","init","actions","handleQuery","query","getOptimizableFeatures","data","undefined","tf","handleAction","action","getActionMask","map","resetDialog","load","parameters","levenshteinDistance","s1","s2","d","Array","from","length","fill","i","j","Math","min","max","fuzzyMatch","text","substring","bestMatch","extract","score","aMatch","hashcode","input","hash","charCodeAt","initializeVariable","shape","scalar","initializer","heNormal","zeros","randomNormal","Error","randomTensor","apply","asScalar","variable","LSTM","inputSize","hiddenSize","outputSize","dropout","lstmKernel","lstmBias","lstmForgetBias","lstmInitH","lstmInitC","denseWeights","denseBias","initLSTM","clone","c","h","predict","x","mask","temperature","_this","nc","nh","y","matMul","add","squeeze","div","softmax","mul","weights","_this2","_this4","array","maskLUS","maskPreviousAction","LUSAction","_this3","size","embeddings","_this5","userTalked","indexOf","previousAction","includes","indexes","toLowerCase","split","word","asType","sum","use","encoder","encodeQuery","emptyEncoding","embed","squeezedEmbed","loaderFunction","vectors","JSON","parse","tokens","filter","token","forEach","Object","keys","push","bestToken","lowestDistance","Infinity","vocabToken","distance","embeddingsMatrix","mean","_Pact","prototype","then","onFulfilled","onRejected","result","state","s","callback","_settle","v","e","o","value","pact","bind","observer","_isSettledPact","thenable","_for","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","Symbol","iterator","asyncIterator","featurizers","optimizer","adam","lstmTemperature","lstmDropout","Promise","all","featurizer","reduce","acc","lstm","lstmC","lstmH","features","idx","_this6","fitStory","story","_this8","minimize","predictions","inputs","statePred","masks","targetsMatrix","targets","predictionsMatrix","lossScalar","categoricalCrossentropy","argMax","loss","arraySync","isFailing","categoricalAccuracy","stateIdx","_push","train","stories","nEpochs","onEpochEnd","epochMetrics","_this10","epoch","confusionMatrix","allTargets","allPredictions","truePredictions","failingSamples","accuracy","recall","precision","allLosses","a","b","storyIdx","storyData","_this12","prediction","actionIdx","confidence","_this14","metrics","averageConfidence","confidences","json","id","_this16","stringify","Slot","dependantActions","invDependantActions","isDefined","isDependant","isInvDependant","getValue","setValue","name","categories","threshold","categoryNames","oneHotValue","category","previousValue","bestValue","entries","match","keyword","m","hm","currentUneqPrevious","bestEqPrevious","betterScore","_Slot","source","inputAnswered","line","newStory","exec","newInput","newAction","testSize","splice","floor","random","slots","model","ask","digest","turnConfidence","slot"],"mappings":"gWASaA,aAAb,aAeaC,UAAe,EAf5B,2BAuBUC,cAAKC,cACPF,KAAKE,QAAUA,oBAxBvB,sCAqCUC,qBAAYC,+BAelBC,uBAAA,SAAuBC,GACnB,YAAaC,IAATD,EACOE,QAAS,CAAC,IAGAF,KAOzBG,aAAA,SAAaC,OAQbC,cAAA,WACI,YAAYT,QAAQU,IAAI,yBAO5BC,YAAA,eAMAC,KAAA,SAAKC,yBAOD,uBAAO,iUClGCC,EAAoBC,EAAYC,GAM5C,IALA,IAAMC,EAAIC,MAAMC,KACZD,MAAMH,EAAGK,OAAS,GAClB,sBAAUF,MAAMF,EAAGI,OAAS,GAAGC,KAAK,KAG/BC,EAAI,EAAGA,GAAKP,EAAGK,OAAQE,GAAK,EACjCL,EAAEK,GAAG,GAAKA,EAGd,IAAK,IAAIC,EAAI,EAAGA,GAAKP,EAAGI,OAAQG,GAAK,EACjCN,EAAE,GAAGM,GAAKA,EAGd,IAAK,IAAIA,EAAI,EAAGA,EAAIP,EAAGI,OAAQG,GAAK,EAChC,IAAK,IAAID,EAAI,EAAGA,EAAIP,EAAGK,OAAQE,GAAK,EAGhCL,EAAEK,EAAI,GAAGC,EAAI,GAAKC,KAAKC,IACnBR,EAAEK,GAAGC,EAAI,GAAK,EACdN,EAAEK,EAAI,GAAGC,GAAK,EACdN,EAAEK,GAAGC,IALiBR,EAAGO,KAAON,EAAGO,GAAM,EAAI,IAUzD,OAAON,EAAEF,EAAGK,QAAQJ,EAAGI,QAAUI,KAAKE,IAAIX,EAAGK,OAAQJ,EAAGI,OAAQ,YC1BpDO,EAAWC,EAAcC,GAGrC,IAFA,IAAIC,EAAmB,CAAEC,aAAS1B,EAAW2B,MAAO,GAE3CV,EAAI,EAAGA,EAAIM,EAAKR,OAAQE,GAAK,EAAG,CACrC,IAAMS,EAAUH,EAAKC,UAAUP,EAAGA,EAAIO,EAAUT,QAE1Ca,EAAS,CACXF,QAAAA,EACAC,MAAO,EAAIlB,EAAoBiB,EAASF,IAG5C,GAAqB,IAAjBI,EAAOD,MACP,OAAOC,EAGPA,EAAOD,MAAQF,EAAUE,QACzBF,EAAYG,GAIpB,OAAOH,WClBKI,EAASC,GAGrB,IAFA,IAAIC,EAAO,EAEFd,EAAI,EAAGA,EAAIa,EAAMf,OAAQE,GAAK,EAGnCc,GAASA,GAAQ,GAAKA,EAFVD,EAAME,WAAWf,GAG7Bc,GAAQ,EAGZ,OAAOA,WCXKE,EAAmBC,EAAiBC,EAChDzC,GACA,gBAFgDyC,IAAAA,GAAkB,YAClEzC,IAAAA,EAA8B,MACvBO,OAAQ,WACX,IAAImC,EAEJ,OAAQ1C,GACR,IAAK,KACD0C,EAAcnC,eAAgBoC,SAAS,IACvC,MAEJ,IAAK,QACDD,EAAcnC,eAAgBqC,QAC9B,MAEJ,IAAK,SACDF,EAAcnC,eAAgBsC,aAAa,IAC3C,MAEJ,QACI,UAAUC,8EACkE9C,QAIhF,IAAI+C,EAAeL,EAAYM,MAAMR,GAGrC,OAFIC,IAAQM,EAAeA,EAAaE,YAEjCF,EAAaG,iBCxBfC,aAqBT,WAAYC,EAAmBC,EAAoBC,EAAoBC,YAAAA,IAAAA,EAAkB,IACrFxD,KAAKyD,WAAajB,EAAmB,CAACa,EAAYC,EAAyB,EAAbA,IAC9DtD,KAAK0D,SAAWlB,EAAmB,CAAc,EAAbc,IAAiB,EAAO,SAC5DtD,KAAK2D,eAAiBnB,EAAmB,CAAC,IAAI,EAAM,SACpDxC,KAAK4D,UAAYpB,EAAmB,CAAC,EAAGc,IACxCtD,KAAK6D,UAAYrB,EAAmB,CAAC,EAAGc,IAExCtD,KAAK8D,aAAetB,EAAmB,CAACc,EAAYC,IACpDvD,KAAK+D,UAAYvB,EAAmB,CAACe,IAAa,EAAO,SAEzDvD,KAAKwD,QAAUA,EA/BvB,2BAuCIQ,SAAA,SAASC,GACL,gBADKA,IAAAA,GAAiB,GACf,CACHC,EAAkBD,EAAQjE,KAAK6D,UAAUI,QAAUjE,KAAK6D,UACxDM,EAAkBF,EAAQjE,KAAK4D,UAAUK,QAAUjE,KAAK4D,cAWhEQ,QAAA,SAAQC,EAAgBH,EAAgBC,EAAgBG,EACpDC,cACA,gBADAA,IAAAA,EAAsB,GACf/D,OAAQ,iBAEMA,gBACDgE,EAAKb,eACHa,EAAKf,WACLe,EAAKd,SACLlD,QAAS,CAAC6D,IACxBF,EAAGD,GALAO,OAAIC,OASPC,EAAkBnE,UACTkE,EAAIF,EAAKhB,SACjBoB,OAAOJ,EAAKV,cACZe,IAAIL,EAAKT,WACTe,UACAC,IAAIR,GACJS,UACAC,UAAIX,EAAAA,EAAQ,GAKjB,MAAO,CAAEK,EAFTA,EAAIA,EAAEI,IAAIvE,MAAOmE,IAELF,GAAAA,EAAIC,GAAAA,QAOxB5D,KAAA,SAAKoE,cACD1E,OAAQ,WAEJ2E,EAAK1B,WAAajD,SAAU0E,EAAQzB,YAAYN,WAChDgC,EAAKzB,SAAWlD,SAAU0E,EAAQxB,UAAUP,WAC5CgC,EAAKxB,eAAiBnD,SAAU0E,EAAQvB,gBAAgBR,WACxDgC,EAAKvB,UAAYpD,SAAU0E,EAAQtB,WAAWT,WAC9CgC,EAAKtB,UAAYrD,SAAU0E,EAAQrB,WAAWV,WAC9CgC,EAAKrB,aAAetD,SAAU0E,EAAQpB,cAAcX,WACpDgC,EAAKpB,UAAYvD,SAAU0E,EAAQnB,WAAWZ,4CAS5BnD,4BAAAoF,EAAK3B,WAAW4B,iDAClBD,EAAK1B,SAAS2B,iDACRD,EAAKzB,eAAe0B,iDACzBD,EAAKxB,UAAUyB,iDACfD,EAAKvB,UAAUwB,iDACZD,EAAKtB,aAAauB,iDACrBD,EAAKrB,UAAUsB,0BAGpC,MAVgB,CACZ5B,aACAC,WACAC,iBACAC,YACAC,YACAC,eACAC,2BA7GZ,kMCyCI,iCAI0B,CAAEuB,SAAS,EAAMC,oBAAoB,EAAMC,UAAW,aAH5EF,QAAAA,oBACAC,mBAAAA,oBACAC,UAAAA,aAAY,eAEZhB,yBAjBU,oBAkBVA,EAAKc,QAAUA,EACfd,EAAKe,mBAAqBA,EAC1Bf,EAAKgB,UAAYA,EAEjBhB,EAAK3D,uBAvBb,2BA0BUZ,cAAKC,qDACKD,YAAKC,oBAEjBuF,EAAKC,KAAOxF,EAAQoB,OACpBmE,EAAKE,WAAanD,EAAmB,CAACiD,EAAKC,KAAMD,EAAKC,SA9B9D,sCAiCUvF,qBAAYC,aAEVJ,KADJ,uBAAOQ,OAAQ,WAIX,OAHAoF,EAAKC,WAAuB,KAAVzF,EAGGI,SACjB,CAACoF,EAAK1F,QAAQ4F,QAAQF,EAAKG,iBAC3BH,EAAK1F,QAAQoB,WAxC7B,sCA6CIjB,uBAAA,SAAuBC,GACnB,OAAqBA,EAAKsE,OAAO5E,KAAK2F,YAAYb,aAGtDrE,aAAA,SAAaC,GAETV,KAAK+F,eAAiBrF,IAAWV,KAAKwF,UAAY9E,EAASV,KAAK+F,kBAGpEpF,cAAA,WACI,IAAM2D,cAAa3D,yBAYnB,OATIX,KAAKsF,SAAWtF,KAAK6F,aACrBvB,EAAKtE,KAAKE,QAAQ4F,QAAQ9F,KAAKwF,aAAc,GAI7CxF,KAAKuF,oBAAsBvF,KAAKE,QAAQ8F,SAAShG,KAAK+F,kBACtDzB,EAAKtE,KAAKE,QAAQ4F,QAAQ9F,KAAK+F,kBAAmB,GAG/CzB,KAGXzD,YAAA,WACIb,KAAK6F,YAAa,EAClB7F,KAAK+F,oBAAiBxF,KAG1BO,KAAA,SAAKC,GACDf,KAAK2F,WAAanF,OAAQ,kBAAMA,SAAUO,EAAW4E,YAAYxC,6DAK9BnD,KAAK2F,WAAWN,0BADnD,MAAO,CACHM,gBAjFZ,uCAAsC5F,mBCnBlC,WAAY2F,gBACRlB,yBAPU,eAQVA,EAAKkB,KAAOA,8BAGVvF,qBAAYC,aAI0BJ,KAHxC,uBAAOQ,OAAQ,WACX,IAAMyF,EAAU7F,EAAM8F,cACjBC,MAAM,OACNvF,IAAI,SAACwF,UAAShE,EAASgE,GAAQX,EAAKC,OAEzC,OAAqBlF,SAAUyF,EAASR,EAAKC,MAAMW,OAAO,WAAWC,IAAI,MAlBrF,uCAAyBvG,mBCHzB,8DACkB,6BAKLyE,OAAO,aANpB,2BAQUvE,cAAKC,qDACKD,YAAKC,2CACIqG,kCAArBd,EAAKe,0BAGsBf,EAAKgB,YAAY,sBAA5ChB,EAAKiB,sBAbb,sCAmBkBD,qBAAYrG,8BACFJ,KAAKwG,QAAQG,MAAM,CAACvG,mBAAlCuG,GACN,IAAMC,EAA8BD,EAAM7B,UAG1C,OAFAtE,UAAWmG,GAEJC,IAxBf,sCA2BUzG,qBAAYC,OAEd,uBAAKA,EACMJ,KAGCyG,YAAYrG,GAHbJ,KAAK0G,cAAczC,SA9BtC,uCAAyBlE,6BCgBrB,WAAY8G,EAAuCnB,gBAC/ClB,yBAXU,iBAYVA,EAAKkB,KAAO,EAAIA,EAChBlB,EAAKqC,eAAiBA,WAd9B,2BAiBU5G,cAAKC,qDACKD,YAAKC,2CACeuF,EAAKoB,mCAArCpB,EAAKqB,QAAUC,KAAKC,aAnB5B,sCAsBU7G,qBAAYC,aAUUJ,KATxB,uBAAqBQ,OAAQ,WACzB,IAAMyG,EAAS7G,EAAM8F,cAChBC,MAAM,OACNe,OAAO,SAACC,UAAUA,EAAM7F,OAAS,IAEhCqE,EAA4B,GA4BlC,GA1BAsB,EAAOG,QAAQ,SAACD,GAEZ,GAAIE,OAAOC,KAAK1B,EAAKkB,SAASd,SAASmB,GACnCxB,EAAW4B,KAAK/G,SAAUoF,EAAKkB,QAAQK,SAGpC,CACH,IAAIK,EACAC,EAAyBC,SAE7BL,OAAOC,KAAK1B,EAAKkB,SAASM,QAAQ,SAACO,GAC/B,IAAMC,EAAW5G,EAAoB2G,EAAYR,GAE7CS,EAAWH,IACXD,EAAYG,EACZF,EAAiBG,KAIrBH,EAAiB,IACjB9B,EAAW4B,KAAK/G,SAAUoF,EAAKkB,QAAQU,QAMzB,IAAtB7B,EAAWrE,OACX,OAAOd,QAAS,CAACoF,EAAKF,OAG1B,IAAMmC,EAAmBrH,QAASmF,GAElC,OAAOnF,SAAU,CAACqH,EAAiBC,KAAK,GAAID,EAAiBjG,IAAI,QA9D7E,uCAAmC7B,ICX5B,MAAMgI,EAAqB,WACjC,SAASA,KAiCT,OAhCAA,EAAMC,UAAUC,KAAO,SAASC,EAAaC,GAC5C,MAAMC,EAAS,IAAIL,EACbM,EAAQrI,KAAKsI,EACnB,GAAID,EAAO,CACV,MAAME,EAAmB,EAARF,EAAYH,EAAcC,EAC3C,GAAII,EAAU,CACb,IACCC,EAAQJ,EAAQ,EAAGG,EAASvI,KAAKyI,IAChC,MAAOC,GACRF,EAAQJ,EAAQ,EAAGM,GAEpB,OAAON,EAEP,OAAOpI,KAiBT,OAdAA,KAAK2I,EAAI,SAASnE,GACjB,IACC,MAAMoE,EAAQpE,EAAMiE,EACN,EAAVjE,EAAM8D,EACTE,EAAQJ,EAAQ,EAAGF,EAAcA,EAAYU,GAASA,GAC5CT,EACVK,EAAQJ,EAAQ,EAAGD,EAAWS,IAE9BJ,EAAQJ,EAAQ,EAAGQ,GAEnB,MAAOF,GACRF,EAAQJ,EAAQ,EAAGM,KAGdN,GAEDL,EAlC0B,GAsC3B,SAASS,EAAQK,EAAMR,EAAOO,GACpC,IAAKC,EAAKP,EAAG,CACZ,GAAIM,aAAiBb,EAAO,CAC3B,IAAIa,EAAMN,EAOT,YADAM,EAAMD,EAAIH,EAAQM,KAAK,KAAMD,EAAMR,IALvB,EAARA,IACHA,EAAQO,EAAMN,GAEfM,EAAQA,EAAMH,EAMhB,GAAIG,GAASA,EAAMX,KAElB,YADAW,EAAMX,KAAKO,EAAQM,KAAK,KAAMD,EAAMR,GAAQG,EAAQM,KAAK,KAAMD,EAAM,IAGtEA,EAAKP,EAAID,EACTQ,EAAKJ,EAAIG,EACT,MAAMG,EAAWF,EAAKF,EAClBI,GACHA,EAASF,IAKL,SAASG,EAAeC,GAC9B,OAAOA,aAAoBlB,GAAsB,EAAbkB,EAASX,EA6LvC,SAASY,EAAKC,EAAMC,EAAQC,GAElC,IADA,IAAIC,IACK,CACR,IAAIC,EAAiBJ,IAIrB,GAHIH,EAAeO,KAClBA,EAAiBA,EAAed,IAE5Bc,EACJ,OAAOnB,EAER,GAAImB,EAAetB,KAAM,CACxBqB,EAAQ,EACR,MAED,IAAIlB,EAASiB,IACb,GAAIjB,GAAUA,EAAOH,KAAM,CAC1B,IAAIe,EAAeZ,GAEZ,CACNkB,EAAQ,EACR,MAHAlB,EAASA,EAAOE,EAMlB,GAAIc,EAAQ,CACX,IAAII,EAAcJ,IAClB,GAAII,GAAeA,EAAYvB,OAASe,EAAeQ,GAAc,CACpEF,EAAQ,EACR,QAIH,IAAIT,EAAO,IAAId,EACX0B,EAASjB,EAAQM,KAAK,KAAMD,EAAM,GAEtC,OADW,IAAVS,EAAcC,EAAetB,KAAKyB,GAA8B,IAAVJ,EAAclB,EAAOH,KAAK0B,GAAoBH,EAAYvB,KAAK2B,IAAqB3B,UAAK,EAAQwB,GACjJZ,EACP,SAASc,EAAiBf,GACzBR,EAASQ,EACT,EAAG,CACF,GAAIQ,IACHI,EAAcJ,MACKI,EAAYvB,OAASe,EAAeQ,GAEtD,YADAA,EAAYvB,KAAK2B,GAAoB3B,UAAK,EAAQwB,GAKpD,KADAF,EAAiBJ,MACOH,EAAeO,KAAoBA,EAAed,EAEzE,YADAD,EAAQK,EAAM,EAAGT,GAGlB,GAAImB,EAAetB,KAElB,YADAsB,EAAetB,KAAKyB,GAAkBzB,UAAK,EAAQwB,GAIhDT,EADJZ,EAASiB,OAERjB,EAASA,EAAOK,UAERL,IAAWA,EAAOH,MAC5BG,EAAOH,KAAK0B,GAAkB1B,UAAK,EAAQwB,GAE5C,SAASC,EAAiBH,GACrBA,GACHnB,EAASiB,MACKjB,EAAOH,KACpBG,EAAOH,KAAK0B,GAAkB1B,UAAK,EAAQwB,GAE3CE,EAAiBvB,GAGlBI,EAAQK,EAAM,EAAGT,GAGnB,SAASwB,KACJL,EAAiBJ,KAChBI,EAAetB,KAClBsB,EAAetB,KAAKyB,GAAkBzB,UAAK,EAAQwB,GAEnDC,EAAiBH,GAGlBf,EAAQK,EAAM,EAAGT,IA5K2C,oBAAXyB,SAA0BA,OAAOC,WAAaD,OAAOC,SAAWD,OAAO,qBA6DvD,oBAAXA,SAA0BA,OAAOE,gBAAkBF,OAAOE,cAAgBF,OAAO,+DCvHtI,kBACI3J,IAAAA,QACA8J,IAAAA,gBACA1G,WAAAA,aAAa,SACb2G,UAAAA,aAAYzJ,QAAS0J,KAAK,WAC1B3F,YAAAA,aAAc,QACdf,QAAAA,aAAU,IAEVxD,KAAKE,QAAUA,EACfF,KAAKgK,YAAcA,EACnBhK,KAAKiK,UAAYA,EAEjBjK,KAAKsD,WAAaA,EAClBtD,KAAKuD,WAAarD,EAAQoB,OAE1BtB,KAAKmK,gBAAkB5F,EACvBvE,KAAKoK,YAAc5G,EApC3B,2BA0CUvD,0BAGED,4BADEqK,QAAQC,IACVnF,EAAK6E,YAAYpJ,IAAI,SAAC2J,UAAeA,EAAWtK,KAAKkF,EAAKjF,6BAI9DiF,EAAK9B,UAAY8B,EAAK6E,YACjBpJ,IAAI,SAAC2J,UAAeA,EAAW7E,OAC/B8E,OAAO,SAACC,EAAK/E,UAAS+E,EAAM/E,GAAM,GAEvCP,EAAKuF,KAAO,IAAItH,EAAK+B,EAAK9B,UAAW8B,EAAK7B,WAAY6B,EAAK5B,WAAY4B,EAAKiF,aAE5EjF,EAAKtE,gBAvDb,sCA6DIA,YAAA,WACIb,KAAKgK,YAAY5C,QAAQ,SAACmD,UAAeA,EAAW1J,sBAChBb,KAAK0K,KAAK1G,WAAxChE,KAAK2K,QAARzG,EAAkBlE,KAAK4K,QAARzG,KAMRhE,qBAAYC,OACtB,OAAOiK,QAAQC,IACXtK,KAAKgK,YAAYpJ,IAAI,SAAC2J,UAAeA,EAAWpK,YAAYC,MAvExE,sCA8EYC,uBAAA,SAAuBwK,cAC3B,OAAOrK,OAAQ,WACX,IAAMmF,EAAaC,EAAKoE,YAAYpJ,IAChC,SAAC2J,EAAYO,UAAQP,EAAWlK,uBAAuBwK,EAASC,MAMpE,OAFAnF,EAAW4B,KAAK/G,QAAS,CAAC,KAELA,SAAUmF,QAO/BlF,aAAA,SAAaC,GACjBV,KAAKgK,YAAYpJ,IAAI,SAAC2J,UAAeA,EAAW9J,aAAaC,QAMzDC,cAAA,sBACJ,OAAOH,OAAQ,kBAAMuK,EAAKf,YAErBpJ,IAAI,SAAC2J,UAA6B/J,SAC/B+J,EAAW5J,qBACXJ,EAAW,aAGdiK,OAAO,SAACC,EAAKnG,UAAS9D,MAAOiK,EAAKnG,IAAO9D,OAAQ,CAACuK,EAAK7K,QAAQoB,eAM1D0J,kBAASC,wBA6BnB,IAAI3K,EA8CJ,OA5CA4K,EAAKjB,UAAUkB,SAAS,iBACLD,EAAKR,KAAK1G,UAAS,GAA5BE,IAAAA,EAAGC,IAAAA,EAGHiH,EAAcC,EAAOzK,IAAI,SAACiK,EAAUC,GACtC,IAAMQ,EAAYJ,EAAKR,KAAKtG,QACV8G,EAAK7K,uBAAuBwK,GAC5B3G,EACAC,EACAoH,EAAMT,IAMxB,OAHA5G,EAAIoH,EAAU7G,GACdN,EAAImH,EAAU5G,GAEP4G,EAAU3G,IAGf6G,EAAgBhL,QAASiL,GACzBC,EAAoBlL,QAAS4K,GAG7BO,EAAyBnL,UAAWoL,wBACtCJ,EAAeE,GACjB5D,OAcF,OAXAxH,EAAO,CACHmL,QAASjL,OAAQgL,EAAcK,OAAO,IACtCT,YAAa5K,OAAQkL,EAAkBG,OAAO,IAC9CC,KAAeH,EAAWI,YAC1BC,UAAWxL,UACNyL,oBAAoBT,EAAeE,GACnC5D,OACAiE,YAAc,MAIhBJ,IAIXnL,UAAW,CAAC6K,EAAQI,IAEbnL,KA1EPN,KAAAkL,EAAKrK,cAGL,IAAMwK,EAAkB,GAClBE,EAAuB,GACvBE,EAAyB,GAGtBS,EAAW,wBAAGA,EAAWjB,EAAM3J,4BAAQ4K,GAAY,eACxD,IAAM7D,EAAQ4C,EAAMiB,KAIpBb,EAAO9D,4BAAW2D,EAAK/K,YAAYkI,EAAMjI,yBAAzC+L,OAAAd,KAEAE,EAAMhE,KAAK2D,EAAKvK,iBAEhB8K,EAAQlE,KACU/G,SACV0K,EAAKhL,QAAQ4F,QAAQuC,EAAM3H,QAC3BwK,EAAK3H,aAIb2H,EAAKzK,aAAa4H,EAAM3H,4DA5IpC,sCAsMU0L,sBAAQC,IAAAA,YAASC,QAAAA,aAAU,SAAIC,WAAAA,kBAAahM,YAC1CiM,eAiEJ,OADAC,EAAK5L,cACE2L,KApDyBxM,KAVvB0M,EAAQ,wBAAGA,EAAQJ,uBAASI,GAAS,4BAsB1C,IAAMC,EAAkBnM,OAAQ,kBAAMA,OAAQmM,gBAC1CnM,SAAUoM,GACVpM,SAAUqM,GACVJ,EAAKlJ,cAGHuJ,EAAkBtM,OAAQ,kBAAMmM,EACjC1H,IAAIzE,YAAAA,EAAUmM,EAAgBlK,QAC9B6D,IAAI,KAETkG,EAAe,CACXE,MAAAA,EACAK,eAAAA,EAEAC,SAAmBxM,OAAQ,kBACvBsM,EAAgBxG,MAAMvB,IAAI4H,EAAgBrG,OAAOyF,cAGrDkB,OAAiBzM,OAAQ,kBACrBsM,EAAgB/H,IAAI4H,EAAgBrG,IAAI,IAAIwB,OAAOiE,cAGvDmB,UAAoB1M,OAAQ,kBACxBsM,EAAgB/H,IAAI4H,EAAgBrG,IAAI,IAAIwB,OAAOiE,cAGvDD,KAAMqB,EAAU3C,OAAO,SAAC4C,EAAGC,UAAMD,EAAIC,IAAKF,EAAU7L,QAIxDd,UAAWoM,GACXpM,UAAWqM,GACXrM,UAAW,CAACsM,EAAiBH,SAEVpM,IAAfgM,GACAA,EAAWC,GAxDf,IAAMI,EAA4B,GAC5BC,EAAgC,GAChCM,EAAsB,GACtBJ,EAA2B,GAGxBO,EAAW,wBAAGA,EAAWjB,EAAQ/K,4BAAQgM,GAAY,sCAGlCb,EAAKzB,SAASqB,EAAQiB,mBAAxCC,GAENX,EAAWrF,KAAKgG,EAAU9B,SAC1BoB,EAAetF,KAAKgG,EAAUnC,aAC9B+B,EAAU5F,KAAKgG,EAAUzB,MAErByB,EAAUvB,WACVe,EAAexF,KAAK+F,wFA3NxC,sCAiRUlJ,iBAAQhE,aAGVJ,KAAAwN,EAAK9C,KAAKlH,QAAU,QAEHgK,EAAKnN,8CAA6BmN,EAAKrN,YAAYC,qBAApE,IAAMyK,cACAU,EAAQiC,EAAK7M,gBAEb8M,EAAaD,EAAK9C,KAAKtG,QACzByG,EAAU2C,EAAK7C,MAAO6C,EAAK5C,MAAOW,EAAOiC,EAAKrD,iBAIlD3J,UAAW,CAACgN,EAAK7C,MAAO6C,EAAK5C,QAC7B4C,EAAK7C,MAAQ8C,EAAWhJ,GAAGR,QAC3BuJ,EAAK5C,MAAQ6C,EAAW/I,GAAGT,QAE3B,IAAMyJ,EAAqBlN,OAAQ,kBAAMiN,EAAW9I,EAAEkH,SAASE,cACzD4B,EAAsBnN,OAAQ,kBAAMiN,EAAW9I,EAAEoH,YAAY2B,KAWnE,OARAlN,UAAW,CAACqK,EAAUU,IACtB/K,UAAWiN,GAGXD,EAAK9C,KAAKlH,QAAUgK,EAAKpD,YAEzBoD,EAAK/M,aAAa+M,EAAKtN,QAAQwN,IAExB,CAAEhN,OAAQ8M,EAAKtN,QAAQwN,GAAYC,WAAAA,KA9SlD,sCAuTUzL,eAAMmK,wBA2BR,IAAMM,EAAkBnM,OAAQ,kBAAMA,OAAQmM,gBAC1CnM,SAAUiL,GAAUjL,SAAU4K,GAAcwC,EAAKrK,cAG/CuJ,EAAkBtM,OAAQ,kBAAMmM,EACjC1H,IAAIzE,YAAAA,EAAUmM,EAAgBlK,QAC9B6D,IAAI,KAEHuH,EAAmB,CACrBd,eAAAA,EAEAC,SAAmBxM,OAAQ,kBACvBsM,EAAgBxG,MAAMvB,IAAI4H,EAAgBrG,OAAOyF,cAGrDkB,OAAiBzM,OAAQ,kBACrBsM,EAAgB/H,IAAI4H,EAAgBrG,IAAI,IAAIwB,OAAOiE,cAGvDmB,UAAoB1M,OAAQ,kBACxBsM,EAAgB/H,IAAI4H,EAAgBrG,IAAI,IAAIwB,OAAOiE,cAGvD+B,kBAAmBC,EAAYvD,OAAO,SAAC4C,EAAGC,UAAMD,EAAIC,IAAKU,EAAYzM,QAMzE,OAHAd,UAAW,CAACsM,EAAiBH,IAE7BiB,EAAK/M,cACEgN,KAhDH7N,KAPEyL,EAAoB,GACpBL,EAAwB,GACxB2C,EAAwB,GACxBhB,EAA2B,GAGxBO,EAAW,wBAAGA,EAAWjB,EAAQ/K,4BAAQgM,GAAY,eAC1DM,EAAK/M,cAEA,IAAIqL,EAAW,wBAAGA,EAAWG,EAAQiB,GAAUhM,4BAAQ4K,GAAY,eACpE,IAAM7D,EAAQgE,EAAQiB,GAAUpB,GADuC,uBAIlC0B,EAAKxJ,QAAQiE,EAAMjI,6BAAhDM,IAAAA,OAAQiN,IAAAA,WAEhBlC,EAAQlE,KAAKqG,EAAK1N,QAAQ4F,QAAQuC,EAAM3H,SACxC0K,EAAY7D,KAAKqG,EAAK1N,QAAQ4F,QAAQpF,IACtCqN,EAAYxG,KAAKoG,GAEbjN,IAAW2H,EAAM3H,QAAWqM,EAAe/G,SAASsH,IACpDP,EAAexF,KAAK+F,kGA5UxC,sCAqXIxM,KAAA,SAAKkN,GACD,IAAMjN,EAAagG,KAAKC,MAAMgH,GAE9BhO,KAAKgK,YAAY5C,QAAQ,SAACmD,GACtBA,EAAWzJ,KAAKC,EAAWwJ,EAAW0D,OAG1CjO,KAAK0K,KAAK5J,KAAKC,EAAW2J,MAE1B1K,KAAKa,6CAO4Bb,4BAAAkO,EAAKxD,6CAStC,OAAO3D,KAAKoH,UAAUpN,GATtB,IAAMA,EAAa,CAAE2J,QAEZI,EAAM,wBAAGA,EAAMoD,EAAKlE,YAAY1I,4BAAQwJ,GAAO,eACpD,IAAMP,EAAa2D,EAAKlE,YAAYc,GADmB,uBAIrBP,6BAAlCxJ,EAAWwJ,EAAW0D,2CA3YlC,0CChFaG,cAsBT,WAAYC,EAA4BC,gBACpC9J,sBACK6J,iBAAmBA,EACxB7J,EAAK8J,oBAAsBA,WAzBnC,2BA4BI3N,cAAA,sBACI,YAAYT,QAAQU,IAAI,SAACF,GACrB,IAAM6N,OAA2BhO,IAAf4E,EAAKyD,MACjB4F,EAAcrJ,EAAKkJ,iBAAiBrI,SAAStF,GAC7C+N,EAAiBtJ,EAAKmJ,oBAAoBtI,SAAStF,GAEzD,OAAS6N,KAAeC,GAAeC,IAC/BF,IAAcE,OAI9B5N,YAAA,WACIb,KAAK4I,WAAQrI,KAMjBmO,SAAA,WACI,YAAY9F,SAMhB+F,SAAA,SAAS/F,GACL5I,KAAK4I,MAAQA,MAtDY7I,wDC4C7B,oBACI6O,IAAAA,KACAC,IAAAA,eACAR,qBACAC,wBACAQ,UAAAA,aAAY,aAEZtK,yBAJmB,gBACG,aAKjBuK,cAAgB1H,OAAOC,KAAKuH,GACjCrK,EAAKqK,WAAaA,EAClBrK,EAAKsK,UAAYA,EAEjBtK,EAAKyJ,GAAQW,iBACbpK,EAAKkB,KAAO,EAAIlB,EAAKuK,cAAczN,gBAvB3C,2BA0BUrB,cAAKC,qDACKD,YAAKC,oBACjBuF,EAAK5E,gBA5Bb,sCA+BYmO,YAAA,SAAYpG,GAChB,IAAMmG,EAAgB1H,OAAOC,KAAKtH,KAAK6O,YAEvC,OAAqBrO,SACjBuO,EAAcjJ,QAAQ8C,EAAMqG,UAC5BF,EAAczN,WAIhBnB,qBAAYC,aACQJ,KAAhBkP,EAAgBtJ,EAAK8I,WACvBS,EAA8B,CAAEF,cAAU1O,EAAW0B,aAAS1B,EAAW2B,MAAO,GAGpFmF,OAAO+H,QAAQxJ,EAAKiJ,YAAYzH,QAAQ,gBAAE6H,OAEhCI,OACDzO,IAAI,SAAC0O,UAAYzN,EAAWzB,EAAM8F,cAAeoJ,EAAQpJ,iBAEzDgB,OAAO,SAACqI,UAAMA,EAAErN,OAAS0D,EAAKkJ,YAE9BtE,OACG,SAACgF,EAAID,UAAOC,EAAGtN,MAAQqN,EAAErN,MAAQsN,EAAKD,GACtC,CAAEtN,aAAS1B,EAAW2B,MAAO,IAIrC,QAAsB3B,IAAlB8O,EAAMpN,QAAuB,CAC7B,IAAMwN,EAAsBR,IAAaC,EAAcD,SACjDS,EAAiBP,EAAUF,WAAaC,EAAcD,SACtDU,EAAcN,EAAMnN,MAAQiN,EAAUjN,YAEjB3B,IAAvB4O,EAAUF,UACNQ,GAAuBE,GACvBD,GAAkBD,GAClBC,GAAkBC,KAEtBR,KAAcF,SAAAA,GAAaI,OAKvC,IAAMxE,EAAWrK,OAAQ,kBACrBA,SAAU,CACNoF,EAAKoJ,YAAYG,GACjBvJ,EAAKoJ,YAAYpJ,EAAK8I,gBAQ9B,YAJ2BnO,IAAvB4O,EAAUF,UACVrJ,EAAK+I,SAASQ,mBAGXtE,GApFf,sCAuFI6D,SAAA,WACI,YAAyBnO,IAArBqP,YAAMlB,oBACC,CAAEO,cAAU1O,EAAW0B,aAAS1B,EAAW2B,MAAO,eAGhDwM,wBA5FgBN,4CCnCRyB,GACzB,IAAMxD,EAAmB,GACrBpB,EAAe,GACf6E,GAAgB,EAsDpB,OApDAD,EAAO1J,MAAM,MAAMiB,QAAQ,SAAC2I,GACxB,IAAMC,EAAW,oBAAoBC,KAAKF,GACpCG,EAAW,cAAcD,KAAKF,GAC9BI,EAAY,eAAeF,KAAKF,GAMtB,MAAZC,GAAoB/E,EAAM3J,OAAS,GACnC2J,EAAM1D,KAAa,CAAEnH,MAAO,GAAIM,OAAQ,QACxC2L,EAAQ9E,KAAK0D,GACbA,EAAQ,IAMW,MAAZiF,GAEHjF,EAAM3J,OAAS,GAAG2J,EAAM1D,KAAa,CAAEnH,MAAO,GAAIM,OAAQ,QAE9DuK,EAAM1D,KAAa,CAAEnH,MAAO8P,EAAS,GAAIxP,YAAQH,IACjDuP,GAAgB,GAQI,MAAbK,GAAqBL,EAC5B7E,EAAM1D,KAAa,CAAEnH,MAAO,GAAIM,OAAQyP,EAAU,KAO9B,MAAbA,GAAsBL,IAE7B7E,EAAMA,EAAM3J,OAAS,GAAGZ,OAASyP,EAAU,GAC3CL,GAAgB,KAKpB7E,EAAM3J,OAAS,IACf2J,EAAM1D,KAAa,CAAEnH,MAAO,GAAIM,OAAQ,QACxC2L,EAAQ9E,KAAK0D,IAGVoB,2BCvDoBA,EAAkB+D,GAI7C,IAFA,IAAMjH,EAAgB,GAEb3H,EAAI,EAAGA,EAAI6K,EAAQ/K,OAAS8O,EAAU5O,GAAK,EAChD2H,EAAK5B,WAAL4B,EAAakD,EAAQgE,OACjB3O,KAAK4O,MAAM5O,KAAK6O,SAAWlE,EAAQ/K,QAAS,IAIpD,MAAO,CAAE8K,MAAOC,EAASlD,KAAAA,4BC6BzB,sBAEIqH,MAAAA,aAAQ,SACRhL,UAAAA,aAAY,QAEZxF,KAAKyQ,QAJLA,MAKAzQ,KAAKwQ,MAAQA,EACbxQ,KAAKwF,UAAYA,EAZzB,2BAkBUkL,aAAItQ,aAQ6BJ,KAP7B2Q,EAAoB,CACtBvQ,MAAAA,EACAF,QAAS,GACT0Q,eAAgB,EAChBJ,MAAO,2BAGwBrL,EAAKsL,MAAMrM,QAAQhE,yBAAhDM,IAAAA,OAAQiN,IAAAA,wBAcd,OAJAxI,EAAKqL,MAAMpJ,QAAQ,SAACyJ,GAChBF,EAAOH,MAAMK,EAAK5C,IAAM4C,EAAKnC,aAG1BiC,4BAZAjQ,IAAWyE,EAAKK,6BAAW,OAC9BmL,EAAOzQ,QAAQqH,KAAK7G,GACpBiQ,EAAOC,gBAAkBjD,kBAGOxI,EAAKsL,MAAMrM,QAAQ,sBAAhD1D,IAAAA,OAAQiN,IAAAA,gDAjCvB,sCA8CI9M,YAAA,WACIb,KAAKyQ,MAAM5P"}